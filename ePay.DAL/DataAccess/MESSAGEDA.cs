
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 5/2/2015 5:37:23 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.DataAccess;

namespace EPay.DataAccess
{		
	public partial class MESSAGEDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<MESSAGEDC> LoadAll(DBConnection Connection)
		{
			List<MESSAGEDC> objMESSAGE = new List<MESSAGEDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_MESSAGESLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objMESSAGE.Add(FillObject(drRow));
				}
				
            return objMESSAGE;
		}
		
		public MESSAGEDC LoadByPrimaryKey(DBConnection Connection, int MESSAGE_ID)
		{
			MESSAGEDC objMESSAGE = new MESSAGEDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_MESSAGESLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_MESSAGE_ID", DbType.Int32, MESSAGE_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objMESSAGE = FillObject(reader);
            return objMESSAGE;
		}
		public int Update(DBConnection Connection, List<MESSAGEDC> objMESSAGEs)        
        {
            int updatedCount = 0;
            foreach (MESSAGEDC objMESSAGE in objMESSAGEs)
            {
                updatedCount = Update(Connection, objMESSAGE);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, MESSAGEDC objMESSAGE)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_MESSAGESUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_MESSAGE_ID", DbType.Int32, objMESSAGE.MESSAGE_ID);
			dbCommandWrapper.AddInParameter("p_EVENT_ID", DbType.Int32, objMESSAGE.EVENT_ID);
			dbCommandWrapper.AddInParameter("p_PURPOSE_ID", DbType.Int32, objMESSAGE.PURPOSE_ID);
			dbCommandWrapper.AddInParameter("p_DELIVERY_METHOD_ID", DbType.Int32, objMESSAGE.DELIVERY_METHOD_ID);
			dbCommandWrapper.AddInParameter("p_CALL_ON", DbType.DateTime, objMESSAGE.CALL_ON);
			dbCommandWrapper.AddInParameter("p_ACCESS_CODE", DbType.String, objMESSAGE.ACCESS_CODE);
			dbCommandWrapper.AddInParameter("p_SUBJECT", DbType.String, objMESSAGE.SUBJECT);
			dbCommandWrapper.AddInParameter("p_CONTENTS", DbType.String, objMESSAGE.CONTENTS);
			dbCommandWrapper.AddInParameter("p_RECIPIENTS", DbType.String, objMESSAGE.RECIPIENTS);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objMESSAGE.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objMESSAGE.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objMESSAGE.LOCK_COUNTER);

            try
            {
                if (Connection.Transaction != null)
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

                if (updateCount == 0)
                    objMESSAGE.IsDirty = IsDirty = true;
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: MESSAGE UPDATE ", exp.Message + "\r\n" + exp.StackTrace, objMESSAGE.CREATED_BY);
                objMESSAGE.SetError(exp);
                throw exp;
            }
            
			return updateCount;
        }
		//public int Insert(DBConnection Connection, List<MESSAGEDC> objMESSAGEs)        
  //      {
  //          int insertCount = 0;
  //          foreach (MESSAGEDC objMESSAGE in objMESSAGEs)
  //          {
  //               insertCount = Insert(Connection, objMESSAGE);
  //          }
  //          return  insertCount;
  //      }
		//private int Insert(DBConnection Connection, MESSAGEDC objMESSAGE)
  //      {
  //          int insertCount = 0;

  //          StringBuilder sql = new StringBuilder();
  //          sql.Append("proc_MESSAGESInsert");

  //          DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

  //          dbCommandWrapper.AddOutParameter("p_MESSAGE_ID", DbType.Int32, objMESSAGE.MESSAGE_ID);
  //          if (objMESSAGE.EVENT_ID == 0 || objMESSAGE.EVENT_ID == null)
  //              dbCommandWrapper.AddInParameter("p_EVENT_ID", DbType.Int32, DBNull.Value);
  //          else
  //              dbCommandWrapper.AddInParameter("p_EVENT_ID", DbType.Int32, objMESSAGE.EVENT_ID);
           
		//	dbCommandWrapper.AddInParameter("p_PURPOSE_ID", DbType.Int32, objMESSAGE.PURPOSE_ID);
		//	dbCommandWrapper.AddInParameter("p_DELIVERY_METHOD_ID", DbType.Int32, objMESSAGE.DELIVERY_METHOD_ID);
		//	dbCommandWrapper.AddInParameter("p_CALL_ON", DbType.DateTime, objMESSAGE.CALL_ON);
		//	dbCommandWrapper.AddInParameter("p_ACCESS_CODE", DbType.String, objMESSAGE.ACCESS_CODE);
		//	dbCommandWrapper.AddInParameter("p_SUBJECT", DbType.String, objMESSAGE.SUBJECT);
		//	dbCommandWrapper.AddInParameter("p_CONTENTS", DbType.String, objMESSAGE.CONTENTS);
		//	dbCommandWrapper.AddInParameter("p_RECIPIENTS", DbType.String, objMESSAGE.RECIPIENTS);
		//	dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objMESSAGE.CREATED_ON);
		//	dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objMESSAGE.CREATED_BY);
  //          dbCommandWrapper.AddInParameter("p_TIME_ZONE_CALL_ON", DbType.String, objMESSAGE.TIME_ZONE_CALL_ON);
  //          dbCommandWrapper.AddInParameter("p_MESSAGE_RMAGS", DbType.String, objMESSAGE.MESSAGE_RMAGS == null ? "" : string.Join(",", (objMESSAGE.MESSAGE_RMAGS)));
  //          dbCommandWrapper.AddInParameter("p_MESSAGE_COMPANIES", DbType.String, objMESSAGE.MESSAGE_COMPANIES == null ? "" : string.Join(",", objMESSAGE.MESSAGE_COMPANIES));

  //          try
  //          {
  //              if (Connection.Transaction != null)
  //                  insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
  //              else
  //                  insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
  //          }
  //          catch (Exception exp)
  //          {
  //              Utilities.InsertIntoErrorLog("Error: MESSAGE INSERTION ", exp.Message + "\r\n" + exp.StackTrace, objMESSAGE.CREATED_BY);
  //              objMESSAGE.SetError(exp);
  //              throw exp;
  //          }
  //          objMESSAGE.MESSAGE_ID = (int)dbCommandWrapper.DBCommand.Parameters["@p_MESSAGE_ID"].Value;
  //          return insertCount;
  //      }
		public int Delete(DBConnection Connection, List<MESSAGEDC> objMESSAGEs)        
        {
            int deleteCount = 0;
            foreach (MESSAGEDC objMESSAGE in objMESSAGEs)
            {
                 deleteCount = Delete(Connection, objMESSAGE);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, MESSAGEDC objMESSAGE)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_MESSAGESDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_MESSAGE_ID", DbType.Int32, objMESSAGE.MESSAGE_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private MESSAGEDC FillObject(IDataReader reader)
        {
			MESSAGEDC objMESSAGE = null;
            if (reader != null && reader.Read())
            {	
				objMESSAGE = new MESSAGEDC();
				objMESSAGE.MESSAGE_ID = (int)reader["MESSAGE_ID"];
				objMESSAGE.EVENT_ID = (int)reader["EVENT_ID"];
				objMESSAGE.PURPOSE_ID = (int)reader["PURPOSE_ID"];
				objMESSAGE.DELIVERY_METHOD_ID = (int)reader["DELIVERY_METHOD_ID"];
				objMESSAGE.CALL_ON = reader["CALL_ON"] == DBNull.Value ? null : (DateTime?)reader["CALL_ON"];
				objMESSAGE.ACCESS_CODE = reader["ACCESS_CODE"] == DBNull.Value ? null : (String)reader["ACCESS_CODE"];
				objMESSAGE.SUBJECT = reader["SUBJECT"] == DBNull.Value ? null : (String)reader["SUBJECT"];
				objMESSAGE.CONTENTS = reader["CONTENTS"] == DBNull.Value ? null : (String)reader["CONTENTS"];
				objMESSAGE.RECIPIENTS = reader["RECIPIENTS"] == DBNull.Value ? null : (String)reader["RECIPIENTS"];
				objMESSAGE.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objMESSAGE.CREATED_BY = (int)reader["CREATED_BY"];
				objMESSAGE.LOCK_COUNTER = reader["LOCK_COUNTER"] == DBNull.Value ? null : (int?)reader["LOCK_COUNTER"];

                reader.Close();
                reader.Dispose();
            }
            return objMESSAGE;
        }
		private MESSAGEDC FillObject(DataRow row)
        {
			MESSAGEDC objMESSAGE = null;
			objMESSAGE = new MESSAGEDC();
			objMESSAGE.MESSAGE_ID = (int)row["MESSAGE_ID"];
			objMESSAGE.EVENT_ID = (int)row["EVENT_ID"];
			objMESSAGE.PURPOSE_ID = (int)row["PURPOSE_ID"];
			objMESSAGE.DELIVERY_METHOD_ID = (int)row["DELIVERY_METHOD_ID"];
			objMESSAGE.CALL_ON = row["CALL_ON"] == DBNull.Value ? null : (DateTime?)row["CALL_ON"];
			objMESSAGE.ACCESS_CODE = row["ACCESS_CODE"] == DBNull.Value ? null : (String)row["ACCESS_CODE"];
			objMESSAGE.SUBJECT = row["SUBJECT"] == DBNull.Value ? null : (String)row["SUBJECT"];
			objMESSAGE.CONTENTS = row["CONTENTS"] == DBNull.Value ? null : (String)row["CONTENTS"];
			objMESSAGE.RECIPIENTS = row["RECIPIENTS"] == DBNull.Value ? null : (String)row["RECIPIENTS"];
			objMESSAGE.CREATED_ON = (DateTime)row["CREATED_ON"];
			objMESSAGE.CREATED_BY = (int)row["CREATED_BY"];
			objMESSAGE.LOCK_COUNTER = row["LOCK_COUNTER"] == DBNull.Value ? null : (int?)row["LOCK_COUNTER"];

            return objMESSAGE;
        }
	}
}
