
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:29 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public class USERS_RMAGDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<USERS_RMAGDC> LoadAll(DBConnection Connection)
		{
			List<USERS_RMAGDC> objUSERS_RMAG = new List<USERS_RMAGDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_USERS_RMAGSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objUSERS_RMAG.Add(FillObject(drRow));
				}
				
            return objUSERS_RMAG;
		}
		
		public USERS_RMAGDC LoadByPrimaryKey(DBConnection Connection, int USER_RMAG_ID)
		{
			USERS_RMAGDC objUSERS_RMAG = new USERS_RMAGDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_USERS_RMAGSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_USER_RMAG_ID", DbType.Int32, USER_RMAG_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objUSERS_RMAG = FillObject(reader);
            return objUSERS_RMAG;
		}
		public int Update(DBConnection Connection, List<USERS_RMAGDC> objUSERS_RMAGs)        
        {
            int updatedCount = 0;
            foreach (USERS_RMAGDC objUSERS_RMAG in objUSERS_RMAGs)
            {
                updatedCount = Update(Connection, objUSERS_RMAG);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, USERS_RMAGDC objUSERS_RMAG)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_USERS_RMAGSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_USER_RMAG_ID", DbType.Int32, objUSERS_RMAG.USER_RMAG_ID);
			dbCommandWrapper.AddInParameter("p_USER_ID", DbType.Int32, objUSERS_RMAG.USER_ID);
			dbCommandWrapper.AddInParameter("p_RMAG_ID", DbType.Int32, objUSERS_RMAG.RMAG_ID);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objUSERS_RMAG.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objUSERS_RMAG.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objUSERS_RMAG.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objUSERS_RMAG.MODIFIED_BY);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objUSERS_RMAG.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<USERS_RMAGDC> objUSERS_RMAGs)        
        {
            int insertCount = 0;
            foreach (USERS_RMAGDC objUSERS_RMAG in objUSERS_RMAGs)
            {
                 insertCount = Insert(Connection, objUSERS_RMAG);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, USERS_RMAGDC objUSERS_RMAG)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_USERS_RMAGSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_USER_RMAG_ID", DbType.Int32, objUSERS_RMAG.USER_RMAG_ID);
			dbCommandWrapper.AddInParameter("p_USER_ID", DbType.Int32, objUSERS_RMAG.USER_ID);
			dbCommandWrapper.AddInParameter("p_RMAG_ID", DbType.Int32, objUSERS_RMAG.RMAG_ID);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objUSERS_RMAG.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objUSERS_RMAG.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objUSERS_RMAG.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objUSERS_RMAG.MODIFIED_BY);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<USERS_RMAGDC> objUSERS_RMAGs)        
        {
            int deleteCount = 0;
            foreach (USERS_RMAGDC objUSERS_RMAG in objUSERS_RMAGs)
            {
                 deleteCount = Delete(Connection, objUSERS_RMAG);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, USERS_RMAGDC objUSERS_RMAG)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_USERS_RMAGSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_USER_RMAG_ID", DbType.Int32, objUSERS_RMAG.USER_RMAG_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private USERS_RMAGDC FillObject(IDataReader reader)
        {
			USERS_RMAGDC objUSERS_RMAG = null;
            if (reader != null && reader.Read())
            {	
				objUSERS_RMAG = new USERS_RMAGDC();
				objUSERS_RMAG.USER_RMAG_ID = (int)reader["USER_RMAG_ID"];
				objUSERS_RMAG.USER_ID = (int)reader["USER_ID"];
				objUSERS_RMAG.RMAG_ID = (int)reader["RMAG_ID"];
				objUSERS_RMAG.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objUSERS_RMAG.CREATED_BY = (int)reader["CREATED_BY"];
				objUSERS_RMAG.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
				objUSERS_RMAG.MODIFIED_BY = (int)reader["MODIFIED_BY"];

                reader.Close();
                reader.Dispose();
            }
            return objUSERS_RMAG;
        }
		private USERS_RMAGDC FillObject(DataRow row)
        {
			USERS_RMAGDC objUSERS_RMAG = null;
			objUSERS_RMAG = new USERS_RMAGDC();
			objUSERS_RMAG.USER_RMAG_ID = (int)row["USER_RMAG_ID"];
			objUSERS_RMAG.USER_ID = (int)row["USER_ID"];
			objUSERS_RMAG.RMAG_ID = (int)row["RMAG_ID"];
			objUSERS_RMAG.CREATED_ON = (DateTime)row["CREATED_ON"];
			objUSERS_RMAG.CREATED_BY = (int)row["CREATED_BY"];
			objUSERS_RMAG.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
			objUSERS_RMAG.MODIFIED_BY = (int)row["MODIFIED_BY"];

            return objUSERS_RMAG;
        }
	}
}
