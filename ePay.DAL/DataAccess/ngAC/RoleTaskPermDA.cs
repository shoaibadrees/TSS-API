
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 10/6/2018 12:17:32 AM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public class RoleTaskPermDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<RoleTaskPermDC> LoadAll(DBConnection Connection)
		{
			List<RoleTaskPermDC> objRoleTaskPerm = new List<RoleTaskPermDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_RoleTaskPermsLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objRoleTaskPerm.Add(FillObject(drRow));
				}
				
            return objRoleTaskPerm;
		}
		
		public RoleTaskPermDC LoadByPrimaryKey(DBConnection Connection, string RoleID, string TaskID)
		{
			RoleTaskPermDC objRoleTaskPerm = new RoleTaskPermDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_RoleTaskPermsLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, RoleID);
			dbCommandWrapper.AddInParameter("p_TaskID", DbType.String, TaskID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objRoleTaskPerm = FillObject(reader);
            return objRoleTaskPerm;
		}
		public int Update(DBConnection Connection, List<RoleTaskPermDC> objRoleTaskPerms)        
        {
            int updatedCount = 0;
            foreach (RoleTaskPermDC objRoleTaskPerm in objRoleTaskPerms)
            {
                updatedCount = Update(Connection, objRoleTaskPerm);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, RoleTaskPermDC objRoleTaskPerm)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_RoleTaskPermsUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, objRoleTaskPerm.RoleID);
			dbCommandWrapper.AddInParameter("p_TaskID", DbType.String, objRoleTaskPerm.TaskID);
			dbCommandWrapper.AddInParameter("p_SerialNo", DbType.Int32, objRoleTaskPerm.SerialNo);
			dbCommandWrapper.AddInParameter("p_CanView", DbType.Boolean, objRoleTaskPerm.CanView);
			dbCommandWrapper.AddInParameter("p_CanAdd", DbType.Boolean, objRoleTaskPerm.CanAdd);
			dbCommandWrapper.AddInParameter("p_CanEdit", DbType.Boolean, objRoleTaskPerm.CanEdit);
			dbCommandWrapper.AddInParameter("p_CanDelete", DbType.Boolean, objRoleTaskPerm.CanDelete);
			dbCommandWrapper.AddInParameter("p_CanPrint", DbType.Boolean, objRoleTaskPerm.CanPrint);
			dbCommandWrapper.AddInParameter("p_IsSyncReq", DbType.Boolean, objRoleTaskPerm.IsSyncReq);
			dbCommandWrapper.AddInParameter("p_IsSync", DbType.Boolean, objRoleTaskPerm.IsSync);
			dbCommandWrapper.AddInParameter("p_RowState", DbType.String, objRoleTaskPerm.RowState);
			dbCommandWrapper.AddInParameter("p_AddOn", DbType.DateTime, objRoleTaskPerm.AddOn);
			dbCommandWrapper.AddInParameter("p_AddBy", DbType.String, objRoleTaskPerm.AddBy);
			dbCommandWrapper.AddInParameter("p_EditOn", DbType.DateTime, objRoleTaskPerm.EditOn);
			dbCommandWrapper.AddInParameter("p_EditBy", DbType.String, objRoleTaskPerm.EditBy);
			dbCommandWrapper.AddInParameter("p_SyncDate", DbType.DateTime, objRoleTaskPerm.SyncDate);
			dbCommandWrapper.AddInParameter("p_CompanyID", DbType.Int32, objRoleTaskPerm.CompanyID);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objRoleTaskPerm.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<RoleTaskPermDC> objRoleTaskPerms)        
        {
            int insertCount = 0;
            foreach (RoleTaskPermDC objRoleTaskPerm in objRoleTaskPerms)
            {
                 insertCount = Insert(Connection, objRoleTaskPerm);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, RoleTaskPermDC objRoleTaskPerm)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_RoleTaskPermsInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, objRoleTaskPerm.RoleID);
			dbCommandWrapper.AddInParameter("p_TaskID", DbType.String, objRoleTaskPerm.TaskID);
			dbCommandWrapper.AddInParameter("p_SerialNo", DbType.Int32, objRoleTaskPerm.SerialNo);
			dbCommandWrapper.AddInParameter("p_CanView", DbType.Boolean, objRoleTaskPerm.CanView);
			dbCommandWrapper.AddInParameter("p_CanAdd", DbType.Boolean, objRoleTaskPerm.CanAdd);
			dbCommandWrapper.AddInParameter("p_CanEdit", DbType.Boolean, objRoleTaskPerm.CanEdit);
			dbCommandWrapper.AddInParameter("p_CanDelete", DbType.Boolean, objRoleTaskPerm.CanDelete);
			dbCommandWrapper.AddInParameter("p_CanPrint", DbType.Boolean, objRoleTaskPerm.CanPrint);
			dbCommandWrapper.AddInParameter("p_IsSyncReq", DbType.Boolean, objRoleTaskPerm.IsSyncReq);
			dbCommandWrapper.AddInParameter("p_IsSync", DbType.Boolean, objRoleTaskPerm.IsSync);
			dbCommandWrapper.AddInParameter("p_RowState", DbType.String, objRoleTaskPerm.RowState);
			dbCommandWrapper.AddInParameter("p_AddOn", DbType.DateTime, objRoleTaskPerm.AddOn);
			dbCommandWrapper.AddInParameter("p_AddBy", DbType.String, objRoleTaskPerm.AddBy);
			dbCommandWrapper.AddInParameter("p_EditOn", DbType.DateTime, objRoleTaskPerm.EditOn);
			dbCommandWrapper.AddInParameter("p_EditBy", DbType.String, objRoleTaskPerm.EditBy);
			dbCommandWrapper.AddInParameter("p_SyncDate", DbType.DateTime, objRoleTaskPerm.SyncDate);
			dbCommandWrapper.AddInParameter("p_CompanyID", DbType.Int32, objRoleTaskPerm.CompanyID);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<RoleTaskPermDC> objRoleTaskPerms)        
        {
            int deleteCount = 0;
            foreach (RoleTaskPermDC objRoleTaskPerm in objRoleTaskPerms)
            {
                 deleteCount = Delete(Connection, objRoleTaskPerm);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, RoleTaskPermDC objRoleTaskPerm)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_RoleTaskPermsDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, objRoleTaskPerm.RoleID);
			dbCommandWrapper.AddInParameter("p_TaskID", DbType.String, objRoleTaskPerm.TaskID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private RoleTaskPermDC FillObject(IDataReader reader)
        {
			RoleTaskPermDC objRoleTaskPerm = null;
            if (reader != null && reader.Read())
            {	
				objRoleTaskPerm = new RoleTaskPermDC();
				objRoleTaskPerm.RoleID = (String)reader["RoleID"];
				objRoleTaskPerm.TaskID = (String)reader["TaskID"];
				objRoleTaskPerm.SerialNo = (int)reader["SerialNo"];
				objRoleTaskPerm.CanView = (Boolean)reader["CanView"];
				objRoleTaskPerm.CanAdd = (Boolean)reader["CanAdd"];
				objRoleTaskPerm.CanEdit = (Boolean)reader["CanEdit"];
				objRoleTaskPerm.CanDelete = (Boolean)reader["CanDelete"];
				objRoleTaskPerm.CanPrint = (Boolean)reader["CanPrint"];
				objRoleTaskPerm.IsSyncReq = (Boolean)reader["IsSyncReq"];
				objRoleTaskPerm.IsSync = (Boolean)reader["IsSync"];
				objRoleTaskPerm.RowState = (String)reader["RowState"];
				objRoleTaskPerm.AddOn = reader["AddOn"] == DBNull.Value ? null : (DateTime?)reader["AddOn"];
				objRoleTaskPerm.AddBy = (String)reader["AddBy"];
				objRoleTaskPerm.EditOn = reader["EditOn"] == DBNull.Value ? null : (DateTime?)reader["EditOn"];
				objRoleTaskPerm.EditBy = (String)reader["EditBy"];
				objRoleTaskPerm.SyncDate = reader["SyncDate"] == DBNull.Value ? null : (DateTime?)reader["SyncDate"];
				objRoleTaskPerm.CompanyID = reader["CompanyID"] == DBNull.Value ? null : (int?)reader["CompanyID"];

                reader.Close();
                reader.Dispose();
            }
            return objRoleTaskPerm;
        }
		private RoleTaskPermDC FillObject(DataRow row)
        {
			RoleTaskPermDC objRoleTaskPerm = null;
			objRoleTaskPerm = new RoleTaskPermDC();
			objRoleTaskPerm.RoleID = (String)row["RoleID"];
			objRoleTaskPerm.TaskID = (String)row["TaskID"];
			objRoleTaskPerm.SerialNo = (int)row["SerialNo"];
			objRoleTaskPerm.CanView =(Boolean) row["CanView"];
			objRoleTaskPerm.CanAdd = (Boolean)row["CanAdd"];
			objRoleTaskPerm.CanEdit = (Boolean)row["CanEdit"];
			objRoleTaskPerm.CanDelete = (Boolean)row["CanDelete"];
			objRoleTaskPerm.CanPrint = (Boolean)row["CanPrint"];
			objRoleTaskPerm.IsSyncReq = (Boolean)row["IsSyncReq"];
			objRoleTaskPerm.IsSync = (Boolean)row["IsSync"];
			objRoleTaskPerm.RowState = (String)row["RowState"];
			objRoleTaskPerm.AddOn = row["AddOn"] == DBNull.Value ? null : (DateTime?)row["AddOn"];
			objRoleTaskPerm.AddBy = (String)row["AddBy"];
			objRoleTaskPerm.EditOn = row["EditOn"] == DBNull.Value ? null : (DateTime?)row["EditOn"];
			objRoleTaskPerm.EditBy =(String) row["EditBy"];
			objRoleTaskPerm.SyncDate = row["SyncDate"] == DBNull.Value ? null : (DateTime?)row["SyncDate"];
			objRoleTaskPerm.CompanyID = row["CompanyID"] == DBNull.Value ? null : (int?)row["CompanyID"];

            return objRoleTaskPerm;
        }
	}
}
