
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 10/6/2018 12:17:32 AM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public class UserDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<UserDC> LoadAll(DBConnection Connection)
		{
			List<UserDC> objUser = new List<UserDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_UsersLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objUser.Add(FillObject(drRow));
				}
				
            return objUser;
		}
		
		public UserDC LoadByPrimaryKey(DBConnection Connection, string UserCode)
		{
			UserDC objUser = new UserDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_UsersLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_UserCode", DbType.String, UserCode);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objUser = FillObject(reader);
            return objUser;
		}
		public int Update(DBConnection Connection, List<UserDC> objUsers)        
        {
            int updatedCount = 0;
            foreach (UserDC objUser in objUsers)
            {
                updatedCount = Update(Connection, objUser);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, UserDC objUser)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_UsersUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_UserCode", DbType.String, objUser.UserCode);
			dbCommandWrapper.AddInParameter("p_UserID", DbType.String, objUser.UserID);
			dbCommandWrapper.AddInParameter("p_Password", DbType.String, objUser.Password);
			dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, objUser.RoleID);
			dbCommandWrapper.AddInParameter("p_Status", DbType.Boolean, objUser.Status);
			dbCommandWrapper.AddInParameter("p_LastLoginDate", DbType.DateTime, objUser.LastLoginDate);
			dbCommandWrapper.AddInParameter("p_WrongTries", DbType.Int32, objUser.WrongTries);
			dbCommandWrapper.AddInParameter("p_LastWrongTryDate", DbType.DateTime, objUser.LastWrongTryDate);
			dbCommandWrapper.AddInParameter("p_AddOn", DbType.DateTime, objUser.AddOn);
			dbCommandWrapper.AddInParameter("p_AddBy", DbType.String, objUser.AddBy);
			dbCommandWrapper.AddInParameter("p_EditOn", DbType.DateTime, objUser.EditOn);
			dbCommandWrapper.AddInParameter("p_EditBy", DbType.String, objUser.EditBy);
			dbCommandWrapper.AddInParameter("p_IsSyncReq", DbType.Boolean, objUser.IsSyncReq);
			dbCommandWrapper.AddInParameter("p_UserName", DbType.String, objUser.UserName);
			dbCommandWrapper.AddInParameter("p_Address1", DbType.String, objUser.Address1);
			dbCommandWrapper.AddInParameter("p_Address2", DbType.String, objUser.Address2);
			dbCommandWrapper.AddInParameter("p_Email", DbType.String, objUser.Email);
			dbCommandWrapper.AddInParameter("p_PhoneHome", DbType.String, objUser.PhoneHome);
			dbCommandWrapper.AddInParameter("p_Cell1", DbType.String, objUser.Cell1);
			dbCommandWrapper.AddInParameter("p_Cell2", DbType.String, objUser.Cell2);
			dbCommandWrapper.AddInParameter("p_Other", DbType.String, objUser.Other);
			dbCommandWrapper.AddInParameter("p_CompanyID", DbType.Int32, objUser.CompanyID);
			dbCommandWrapper.AddInParameter("p_IsSync", DbType.Boolean, objUser.IsSync);
			dbCommandWrapper.AddInParameter("p_RowState", DbType.String, objUser.RowState);
			dbCommandWrapper.AddInParameter("p_SyncDate", DbType.DateTime, objUser.SyncDate);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objUser.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<UserDC> objUsers)        
        {
            int insertCount = 0;
            foreach (UserDC objUser in objUsers)
            {
                 insertCount = Insert(Connection, objUser);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, UserDC objUser)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_UsersInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_UserCode", DbType.String, objUser.UserCode);
			dbCommandWrapper.AddInParameter("p_UserID", DbType.String, objUser.UserID);
			dbCommandWrapper.AddInParameter("p_Password", DbType.String, objUser.Password);
			dbCommandWrapper.AddInParameter("p_RoleID", DbType.String, objUser.RoleID);
			dbCommandWrapper.AddInParameter("p_Status", DbType.Boolean, objUser.Status);
			dbCommandWrapper.AddInParameter("p_LastLoginDate", DbType.DateTime, objUser.LastLoginDate);
			dbCommandWrapper.AddInParameter("p_WrongTries", DbType.Int32, objUser.WrongTries);
			dbCommandWrapper.AddInParameter("p_LastWrongTryDate", DbType.DateTime, objUser.LastWrongTryDate);
			dbCommandWrapper.AddInParameter("p_AddOn", DbType.DateTime, objUser.AddOn);
			dbCommandWrapper.AddInParameter("p_AddBy", DbType.String, objUser.AddBy);
			dbCommandWrapper.AddInParameter("p_EditOn", DbType.DateTime, objUser.EditOn);
			dbCommandWrapper.AddInParameter("p_EditBy", DbType.String, objUser.EditBy);
			dbCommandWrapper.AddInParameter("p_IsSyncReq", DbType.Boolean, objUser.IsSyncReq);
			dbCommandWrapper.AddInParameter("p_UserName", DbType.String, objUser.UserName);
			dbCommandWrapper.AddInParameter("p_Address1", DbType.String, objUser.Address1);
			dbCommandWrapper.AddInParameter("p_Address2", DbType.String, objUser.Address2);
			dbCommandWrapper.AddInParameter("p_Email", DbType.String, objUser.Email);
			dbCommandWrapper.AddInParameter("p_PhoneHome", DbType.String, objUser.PhoneHome);
			dbCommandWrapper.AddInParameter("p_Cell1", DbType.String, objUser.Cell1);
			dbCommandWrapper.AddInParameter("p_Cell2", DbType.String, objUser.Cell2);
			dbCommandWrapper.AddInParameter("p_Other", DbType.String, objUser.Other);
			dbCommandWrapper.AddInParameter("p_CompanyID", DbType.Int32, objUser.CompanyID);
			dbCommandWrapper.AddInParameter("p_IsSync", DbType.Boolean, objUser.IsSync);
			dbCommandWrapper.AddInParameter("p_RowState", DbType.String, objUser.RowState);
			dbCommandWrapper.AddInParameter("p_SyncDate", DbType.DateTime, objUser.SyncDate);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<UserDC> objUsers)        
        {
            int deleteCount = 0;
            foreach (UserDC objUser in objUsers)
            {
                 deleteCount = Delete(Connection, objUser);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, UserDC objUser)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_UsersDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_UserCode", DbType.String, objUser.UserCode);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private UserDC FillObject(IDataReader reader)
        {
			UserDC objUser = null;
            if (reader != null && reader.Read())
            {	
				objUser = new UserDC();
				objUser.UserCode = (String)reader["UserCode"];
				objUser.UserID = (String)reader["UserID"];
				objUser.Password = (String)reader["Password"];
				objUser.RoleID = (String)reader["RoleID"];
				objUser.Status = (Boolean)reader["Status"];
				objUser.LastLoginDate = reader["LastLoginDate"] == DBNull.Value ? null : (DateTime?)reader["LastLoginDate"];
				objUser.WrongTries = reader["WrongTries"] == DBNull.Value ? null : (int?)reader["WrongTries"];
				objUser.LastWrongTryDate = reader["LastWrongTryDate"] == DBNull.Value ? null : (DateTime?)reader["LastWrongTryDate"];
				objUser.AddOn = reader["AddOn"] == DBNull.Value ? null : (DateTime?)reader["AddOn"];
				objUser.AddBy = reader["AddBy"] == DBNull.Value ? null : (String)reader["AddBy"];
				objUser.EditOn = reader["EditOn"] == DBNull.Value ? null : (DateTime?)reader["EditOn"];
				objUser.EditBy = (String)reader["EditBy"];
				objUser.IsSyncReq = (Boolean)reader["IsSyncReq"];
				objUser.UserName = (String)reader["UserName"];
				objUser.Address1 = (String)reader["Address1"];
				objUser.Address2 = reader["Address2"] == DBNull.Value ? null : (String)reader["Address2"];
                objUser.Email = (String)reader["Email"];
				objUser.PhoneHome = (String)reader["PhoneHome"];
				objUser.Cell1 = (String)reader["Cell1"];
				objUser.Cell2 = (String)reader["Cell2"];
				objUser.Other = (String)reader["Other"];
				objUser.CompanyID = reader["CompanyID"] == DBNull.Value ? null : (int?)reader["CompanyID"];
				objUser.IsSync = (Boolean)reader["IsSync"];
				objUser.RowState = (String)reader["RowState"];
				objUser.SyncDate = reader["SyncDate"] == DBNull.Value ? null : (DateTime?)reader["SyncDate"];

                reader.Close();
                reader.Dispose();
            }
            return objUser;
        }
		private UserDC FillObject(DataRow row)
        {
			UserDC objUser = null;
			objUser = new UserDC();
			objUser.UserCode = (String)row["UserCode"];
			objUser.UserID = (String)row["UserID"];
			objUser.Password = (String)row["Password"];
			objUser.RoleID = (String)row["RoleID"];
			objUser.Status = (Boolean)row["Status"];
			objUser.LastLoginDate = row["LastLoginDate"] == DBNull.Value ? null : (DateTime?)row["LastLoginDate"];
			objUser.WrongTries = row["WrongTries"] == DBNull.Value ? null : (int?)row["WrongTries"];
			objUser.LastWrongTryDate = row["LastWrongTryDate"] == DBNull.Value ? null : (DateTime?)row["LastWrongTryDate"];
			objUser.AddOn = row["AddOn"] == DBNull.Value ? null : (DateTime?)row["AddOn"];
			objUser.AddBy = row["AddBy"] == DBNull.Value ? null : (String)row["AddBy"];
			objUser.EditOn = row["EditOn"] == DBNull.Value ? null : (DateTime?)row["EditOn"];
			objUser.EditBy = (String)row["EditBy"];
			objUser.IsSyncReq = (Boolean)row["IsSyncReq"];
			objUser.UserName = (String)row["UserName"];
			objUser.Address1 = (String)row["Address1"];
			objUser.Address2 = row["Address2"] == DBNull.Value ? null : (String)row["Address2"];
			objUser.Email = (String)row["Email"];
			objUser.PhoneHome = (String)row["PhoneHome"];
			objUser.Cell1 = (String)row["Cell1"];
			objUser.Cell2 = (String)row["Cell2"];
			objUser.Other = (String)row["Other"];
			objUser.CompanyID = row["CompanyID"] == DBNull.Value ? null : (int?)row["CompanyID"];
			objUser.IsSync = (Boolean)row["IsSync"];
			objUser.RowState = (String)row["RowState"];
			objUser.SyncDate = row["SyncDate"] == DBNull.Value ? null : (DateTime?)row["SyncDate"];

            return objUser;
        }
	}
}
