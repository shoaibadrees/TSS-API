
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 5/13/2015 3:41:37 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using EPay.DataClasses;
using EPay.Common;
using EPay.DataAccess;

namespace EPay.DataAccess
{		
	public class NOTIFICATIONDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<NOTIFICATIONDC> LoadAll(DBConnection Connection)
		{
			List<NOTIFICATIONDC> objNOTIFICATION = new List<NOTIFICATIONDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_NOTIFICATIONSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objNOTIFICATION.Add(FillObject(drRow));
				}
				
            return objNOTIFICATION;
		}

  //      public List<NOTIFICATIONDC> LoadAllByEventAndType(DBConnection Connection, int EVENTID, int TypeId, int UserId, int NoOfPages)
		//{
  //          string strEventsId = "";
  //          if (EVENTID == 0)
  //          {
  //              DataSet Eventsds = new DataSet();
  //              EVENTDA objEventda = new EVENTDA();
  //              List<EVENTDC> lstEvents = new List<EVENTDC>();
  //              lstEvents = objEventda.LoadAllEventsOfLoggedUser(UserId,true, -1, Connection);
  //              int Count = 1;
  //              foreach (EVENTDC objEvent in lstEvents)
  //              {
  //                  if (Count == lstEvents.Count)
  //                      strEventsId += objEvent.EVENT_ID.ToString();
  //                  else
  //                      strEventsId += objEvent.EVENT_ID.ToString() + ",";

  //                  Count++;
  //              }
  //          }
  //          List<NOTIFICATIONDC> objNOTIFICATION = new List<NOTIFICATIONDC>();
		//	StringBuilder sql = new StringBuilder();
  //          sql.Append("proc_NOTIFICATIONSLoadAllByEventAndType");

		//	DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
  //          dbCommandWrapper.AddInParameter("p_EVENT_ID", DbType.Int32, EVENTID);
  //          dbCommandWrapper.AddInParameter("p_EVENTS_ID", DbType.String, strEventsId);
  //          dbCommandWrapper.AddInParameter("p_USER_ID", DbType.Int32, UserId);
  //          dbCommandWrapper.AddInParameter("p_TYPE", DbType.Int32, TypeId);
  //          dbCommandWrapper.AddInParameter("p_NO_OF_PAGES", DbType.Int32, NoOfPages);

  //          DataSet ds = new DataSet();

  //          if (Connection.Transaction != null)
  //              ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
  //          else
  //              ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

  //          foreach (DataRow drRow in ds.Tables[0].Rows)
  //          {
  //              objNOTIFICATION.Add(FillObject(drRow));
  //          }

  //          return objNOTIFICATION;
		//}
		public int Update(DBConnection Connection, List<NOTIFICATIONDC> objNOTIFICATIONs)        
        {
            int updatedCount = 0;
            foreach (NOTIFICATIONDC objNOTIFICATION in objNOTIFICATIONs)
            {
                updatedCount = Update(Connection, objNOTIFICATION);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, NOTIFICATIONDC objNOTIFICATION)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_NOTIFICATIONSUpdate");

            SqlDatabase database = (SqlDatabase)Connection.dataBase;

            DbCommand cmd = database.GetStoredProcCommand(sql.ToString());

            database.AddInParameter(cmd, "p_NOTIFICATION_ID", DbType.Int32, objNOTIFICATION.NOTIFICATION_ID);
            database.AddInParameter(cmd, "p_EVENT_ID", DbType.Int32, objNOTIFICATION.EVENT_ID);
            database.AddInParameter(cmd, "p_CREATED_DATE", DbType.DateTime, objNOTIFICATION.CREATED_DATE);
            database.AddInParameter(cmd, "p_TYPE", DbType.Int32, objNOTIFICATION.TYPE);
            database.AddInParameter(cmd, "p_NOTIFICATION", SqlDbType.NVarChar, objNOTIFICATION.NOTIFICATION);

            try
            {
                if (Connection.Transaction != null)
                    updateCount = Connection.dataBase.ExecuteNonQuery(cmd, Connection.Transaction);
                else
                    updateCount = Connection.dataBase.ExecuteNonQuery(cmd);

                if (updateCount == 0)
                    objNOTIFICATION.IsDirty = IsDirty = true;
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: NOTIFICATION UPDATE ", exp.Message + "\r\n" + exp.StackTrace, objNOTIFICATION.CREATED_BY);
                objNOTIFICATION.SetError(exp);
                throw exp;
            }
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<NOTIFICATIONDC> objNOTIFICATIONs)        
        {
            int insertCount = 0;
            foreach (NOTIFICATIONDC objNOTIFICATION in objNOTIFICATIONs)
            {
                 insertCount = Insert(Connection, objNOTIFICATION);
            }
            return  insertCount;
        }
		public int Insert(DBConnection Connection, NOTIFICATIONDC objNOTIFICATION)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_NOTIFICATIONSInsert");

            SqlDatabase database = (SqlDatabase)Connection.dataBase;

            DbCommand cmd = database.GetStoredProcCommand(sql.ToString());

            database.AddOutParameter(cmd, "p_NOTIFICATION_ID", DbType.Int32, objNOTIFICATION.NOTIFICATION_ID);
            database.AddInParameter(cmd, "p_EVENT_ID", DbType.Int32, objNOTIFICATION.EVENT_ID);
            database.AddInParameter(cmd, "p_CREATED_DATE", DbType.DateTime, objNOTIFICATION.CREATED_DATE);
            database.AddInParameter(cmd, "p_TYPE", DbType.Int32, objNOTIFICATION.TYPE);
            database.AddInParameter(cmd, "p_NOTIFICATION", SqlDbType.NVarChar, objNOTIFICATION.NOTIFICATION);
            database.AddInParameter(cmd, "p_CREATED_BY", SqlDbType.NVarChar, objNOTIFICATION.CREATED_BY);

            try
            {
                if (Connection.Transaction != null)
                    insertCount = Connection.dataBase.ExecuteNonQuery(cmd, Connection.Transaction);
                else
                    insertCount = Connection.dataBase.ExecuteNonQuery(cmd);
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: NOTIFICATION INSERTION ", exp.Message + "\r\n" + exp.StackTrace, objNOTIFICATION.CREATED_BY);
                objNOTIFICATION.SetError(exp);
                throw exp;
            }

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<NOTIFICATIONDC> objNOTIFICATIONs)        
        {
            int deleteCount = 0;
            foreach (NOTIFICATIONDC objNOTIFICATION in objNOTIFICATIONs)
            {
                 deleteCount = Delete(Connection, objNOTIFICATION);
            }
            return  deleteCount;
        }
        private int Delete(DBConnection Connection, NOTIFICATIONDC objNOTIFICATION)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_NOTIFICATIONSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

            dbCommandWrapper.AddInParameter("p_NOTIFICATION_ID", DbType.Int32, objNOTIFICATION.NOTIFICATION_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private NOTIFICATIONDC FillObject(IDataReader reader)
        {
			NOTIFICATIONDC objNOTIFICATION = null;
            if (reader != null && reader.Read())
            {	
				objNOTIFICATION = new NOTIFICATIONDC();
                objNOTIFICATION.NOTIFICATION_ID = (int)reader["NOTIFICATION_ID"];
				objNOTIFICATION.EVENT_ID = (int)reader["EVENT_ID"];
				objNOTIFICATION.CREATED_DATE = (DateTime)reader["CREATED_DATE"];
				objNOTIFICATION.TYPE = (int)reader["TYPE"];
                objNOTIFICATION.TYPE_NAME = (String)reader["TYPE_NAME"];
				objNOTIFICATION.NOTIFICATION = (String)reader["NOTIFICATION"];

                reader.Close();
                reader.Dispose();
            }
            return objNOTIFICATION;
        }
		private NOTIFICATIONDC FillObject(DataRow row)
        {
			NOTIFICATIONDC objNOTIFICATION = null;
			objNOTIFICATION = new NOTIFICATIONDC();
          //  objNOTIFICATION.NOTIFICATION_ID = (int)row["NOTIFICATION_ID"];
            objNOTIFICATION.EVENT_ID = row["EVENT_ID"] == DBNull.Value ? 0 : (int)row["EVENT_ID"];
            objNOTIFICATION.EVENT_TYPE = row["EVENT_TYPE"] == DBNull.Value ? 0 : (int)row["EVENT_TYPE"];
			objNOTIFICATION.CREATED_DATE = (DateTime)row["CREATED_DATE"];
			objNOTIFICATION.TYPE = (int)row["TYPE"];
            objNOTIFICATION.TYPE_NAME = (String)row["TYPE_NAME"];
            objNOTIFICATION.TIME_ZONE = row["TIME_ZONE"] == DBNull.Value ? "": (String)row["TIME_ZONE"];
			objNOTIFICATION.NOTIFICATION = (String)row["NOTIFICATION"];
            objNOTIFICATION.NO_OF_NOTIFICATIONS = (int)row["NO_OF_NOTIFICATIONS"];
            objNOTIFICATION.DST_APPLIED_CREATED_DATE = Utility.IsDayTimeSavingEffective((row["CREATED_DATE"] == DBNull.Value ? System.DateTime.Now : (DateTime)row["CREATED_DATE"]), Convert.ToString(row["TIME_ZONE"]));
            objNOTIFICATION.CREATED_DATE_STRING = row["TIME_ZONE"] == DBNull.Value ?  Convert.ToDateTime(row["CREATED_DATE"]).ToString("MM/dd/yyyy HH:mm"):"" ;
            return objNOTIFICATION;
        }
	}
}
