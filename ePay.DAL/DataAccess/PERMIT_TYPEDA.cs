
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:29 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;

namespace EPay.DataAccess
{
    public class PERMITSTYPEDA
    {
        public bool IsDirty { get; set; }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public List<PERMIT_TYPEDC> LoadAll(DBConnection Connection, bool getDescWithCode = false)
        {
            List<PERMIT_TYPEDC> list = new List<PERMIT_TYPEDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_TYPESLoadAll");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("@p_getDescWithCode", DbType.Boolean, getDescWithCode);

            DataSet ds = new DataSet();            

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            list.AddRange(Utility.ConvertToObjects<PERMIT_TYPEDC>(ds.Tables[0]));

            return list;
        }

        public PERMIT_TYPEDC LoadByPrimaryKey(DBConnection Connection, string PERMIT_TYPE_ID)
        {
            PERMIT_TYPEDC obj = new PERMIT_TYPEDC();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_TYPESLoadByPrimaryKey");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("@p_PERMIT_TYPE_ID", DbType.String, PERMIT_TYPE_ID);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            obj = (Utility.ConvertToObject<PERMIT_TYPEDC>(ds.Tables[0]));

            return obj;
        }
        public int Update(DBConnection Connection, List<PERMIT_TYPEDC> objPERMITS_LOOK_UPs)
        {
            int updatedCount = 0;
            foreach (PERMIT_TYPEDC objPERMITS_LOOK_UP in objPERMITS_LOOK_UPs)
            {
                updatedCount = Update(Connection, objPERMITS_LOOK_UP);
            }
            return updatedCount;
        }
        private int Update(DBConnection Connection, PERMIT_TYPEDC objPERMITS_LOOK_UP)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITS_LOOK_UPUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_TYPE_ID", DbType.String, objPERMITS_LOOK_UP.PERMIT_TYPE_ID);
            dbCommandWrapper.AddInParameter("p_DESCRIPTION", DbType.String, objPERMITS_LOOK_UP.DESCRIPTION);
            dbCommandWrapper.AddInParameter("p_PERMIT_CATEGORY", DbType.Int32, objPERMITS_LOOK_UP.PERMIT_CATEGORY);
            dbCommandWrapper.AddInParameter("p_FEE", DbType.String, objPERMITS_LOOK_UP.FEE);
            dbCommandWrapper.AddInParameter("p_DURATION", DbType.String, objPERMITS_LOOK_UP.DURATION);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            if (updateCount == 0)
                objPERMITS_LOOK_UP.IsDirty = IsDirty = true;

            return updateCount;
        }
        public int Insert(DBConnection Connection, List<PERMIT_TYPEDC> objPERMITS_LOOK_UPs)
        {
            int insertCount = 0;
            foreach (PERMIT_TYPEDC objPERMITS_LOOK_UP in objPERMITS_LOOK_UPs)
            {
                insertCount = Insert(Connection, objPERMITS_LOOK_UP);
            }
            return insertCount;
        }
        private int Insert(DBConnection Connection, PERMIT_TYPEDC objPERMITS_LOOK_UP)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_TYPESInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_TYPE_ID", DbType.String, objPERMITS_LOOK_UP.PERMIT_TYPE_ID);
            dbCommandWrapper.AddInParameter("p_DESCRIPTION", DbType.String, objPERMITS_LOOK_UP.DESCRIPTION);
            dbCommandWrapper.AddInParameter("p_PERMIT_CATEGORY", DbType.Int32, objPERMITS_LOOK_UP.PERMIT_CATEGORY);
            dbCommandWrapper.AddInParameter("p_FEE", DbType.String, objPERMITS_LOOK_UP.FEE);
            dbCommandWrapper.AddInParameter("p_DURATION", DbType.String, objPERMITS_LOOK_UP.DURATION);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
        public int Delete(DBConnection Connection, List<PERMIT_TYPEDC> objPERMITS_LOOK_UPs)
        {
            int deleteCount = 0;
            foreach (PERMIT_TYPEDC objPERMITS_LOOK_UP in objPERMITS_LOOK_UPs)
            {
                deleteCount = Delete(Connection, objPERMITS_LOOK_UP);
            }
            return deleteCount;
        }
        private int Delete(DBConnection Connection, PERMIT_TYPEDC objPERMITS_LOOK_UP)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITS_LOOK_UPDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

            dbCommandWrapper.AddInParameter("p_PERMIT_NUMBER", DbType.String, objPERMITS_LOOK_UP.PERMIT_TYPE_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
        //private PERMIT_TYPEDC FillObject(IDataReader reader)
        //{
        //    PERMIT_TYPEDC objPERMITS_LOOK_UP = null;
        //    if (reader != null && reader.Read())
        //    {
        //        objPERMITS_LOOK_UP = new PERMIT_TYPEDC();
        //        objPERMITS_LOOK_UP.PERMIT_TYPE_ID = (String)reader["PERMIT_NUMBER"];
        //        objPERMITS_LOOK_UP.DESCRIPTION = (String)reader["DESCRIPTION"];
        //        objPERMITS_LOOK_UP.PERMIT_CATEGORY = (int)reader["PERMIT_CATEGORY"];
        //        objPERMITS_LOOK_UP.FEE = (String)reader["FEE"];
        //        objPERMITS_LOOK_UP.DURATION = (String)reader["DURATION"];

        //        reader.Close();
        //        reader.Dispose();
        //    }
        //    return objPERMITS_LOOK_UP;
        //}
        //private PERMIT_TYPEDC FillObject(DataRow row)
        //{
        //    PERMIT_TYPEDC objPERMITS_LOOK_UP = null;
        //    objPERMITS_LOOK_UP = new PERMIT_TYPEDC();
        //    objPERMITS_LOOK_UP.PERMIT_TYPE_ID = (String)row["PERMIT_NUMBER"];
        //    objPERMITS_LOOK_UP.DESCRIPTION = (String)row["DESCRIPTION"];
        //    objPERMITS_LOOK_UP.PERMIT_CATEGORY = (int)row["PERMIT_CATEGORY"];
        //    objPERMITS_LOOK_UP.FEE = (String)row["FEE"];
        //    objPERMITS_LOOK_UP.DURATION = (String)row["DURATION"];

        //    return objPERMITS_LOOK_UP;
        //}
    }
}
