
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 3:00:46 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using EPay.DataAccess;
using Microsoft.Practices.EnterpriseLibrary.Data;
using NMART.DataClasses;
namespace NMART.DataAccess
{
    public class PERMIT_ATTACHMENTDA
    {
        public bool IsDirty { get; set; }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public List<PERMIT_ATTACHMENTDC> LoadAll(DBConnection Connection)
        {
            List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENT = new List<PERMIT_ATTACHMENTDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_ATTACHMENTSLoadAll");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            foreach (DataRow drRow in ds.Tables[0].Rows)
            {
                objPERMIT_ATTACHMENT.Add(FillObject(drRow));
            }

            return objPERMIT_ATTACHMENT;
        }

        public PERMIT_ATTACHMENTDC LoadByPrimaryKey(DBConnection Connection, int PERMIT_ID, int ATTACHMENT_ID)
        {
            PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT = new PERMIT_ATTACHMENTDC();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_ATTACHMENTSLoadByPrimaryKey");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, ATTACHMENT_ID);


            IDataReader reader = null;

            if (Connection.Transaction != null)
                reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

            objPERMIT_ATTACHMENT = FillObject(reader);
            return objPERMIT_ATTACHMENT;
        }
        public int Update(DBConnection Connection, List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int updatedCount = 0;
            foreach (PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT in objPERMIT_ATTACHMENTs)
            {
                updatedCount = Update(Connection, objPERMIT_ATTACHMENT);
            }
            return updatedCount;
        }
        private int Update(DBConnection Connection, PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_ATTACHMENTSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT_ATTACHMENT.PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPERMIT_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            if (updateCount == 0)
                objPERMIT_ATTACHMENT.IsDirty = IsDirty = true;

            return updateCount;
        }
        public int Insert(DBConnection Connection, List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int insertCount = 0;
            foreach (PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT in objPERMIT_ATTACHMENTs)
            {
                insertCount = Insert(Connection, objPERMIT_ATTACHMENT);
            }
            return insertCount;
        }
        private int Insert(DBConnection Connection, PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_ATTACHMENTSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT_ATTACHMENT.PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPERMIT_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
        public int Delete(DBConnection Connection, List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int deleteCount = 0;
            foreach (PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT in objPERMIT_ATTACHMENTs)
            {
                deleteCount = Delete(Connection, objPERMIT_ATTACHMENT);
            }
            return deleteCount;
        }
        private int Delete(DBConnection Connection, PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMIT_ATTACHMENTSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT_ATTACHMENT.PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPERMIT_ATTACHMENT.ATTACHMENT_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
        private PERMIT_ATTACHMENTDC FillObject(IDataReader reader)
        {
            PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT = null;
            if (reader != null && reader.Read())
            {
                objPERMIT_ATTACHMENT = new PERMIT_ATTACHMENTDC();
                objPERMIT_ATTACHMENT.PERMIT_ID = (int)reader["PERMIT_ID"];
                objPERMIT_ATTACHMENT.ATTACHMENT_ID = (int)reader["ATTACHMENT_ID"];

                reader.Close();
                reader.Dispose();
            }
            return objPERMIT_ATTACHMENT;
        }
        private PERMIT_ATTACHMENTDC FillObject(DataRow row)
        {
            PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENT = null;
            objPERMIT_ATTACHMENT = new PERMIT_ATTACHMENTDC();
            objPERMIT_ATTACHMENT.PERMIT_ID = (int)row["PERMIT_ID"];
            objPERMIT_ATTACHMENT.ATTACHMENT_ID = (int)row["ATTACHMENT_ID"];

            return objPERMIT_ATTACHMENT;
        }
    }
}

