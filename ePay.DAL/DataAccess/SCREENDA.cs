
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:28 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public class SCREENDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<SCREENDC> LoadAll(DBConnection Connection)
		{
			List<SCREENDC> objSCREEN = new List<SCREENDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_SCREENSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objSCREEN.Add(FillObject(drRow));
				}
				
            return objSCREEN;
		}
		
		public SCREENDC LoadByPrimaryKey(DBConnection Connection, int SCREEN_ID)
		{
			SCREENDC objSCREEN = new SCREENDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_SCREENSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_SCREEN_ID", DbType.Int32, SCREEN_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objSCREEN = FillObject(reader);
            return objSCREEN;
		}
		public int Update(DBConnection Connection, List<SCREENDC> objSCREENs)        
        {
            int updatedCount = 0;
            foreach (SCREENDC objSCREEN in objSCREENs)
            {
                updatedCount = Update(Connection, objSCREEN);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, SCREENDC objSCREEN)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_SCREENSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_SCREEN_ID", DbType.Int32, objSCREEN.SCREEN_ID);
			dbCommandWrapper.AddInParameter("p_SCREEN_NAME", DbType.String, objSCREEN.SCREEN_NAME);
            dbCommandWrapper.AddInParameter("p_IS_EVENT_BASED", DbType.Boolean, objSCREEN.IS_EVENT_BASED);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objSCREEN.MODIFIED_BY);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objSCREEN.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<SCREENDC> objSCREENs)        
        {
            int insertCount = 0;
            foreach (SCREENDC objSCREEN in objSCREENs)
            {
                 insertCount = Insert(Connection, objSCREEN);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, SCREENDC objSCREEN)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_SCREENSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_SCREEN_ID", DbType.Int32, objSCREEN.SCREEN_ID);
			dbCommandWrapper.AddInParameter("p_SCREEN_NAME", DbType.String, objSCREEN.SCREEN_NAME);
            dbCommandWrapper.AddInParameter("p_IS_EVENT_BASED", DbType.Boolean, objSCREEN.IS_EVENT_BASED);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objSCREEN.CREATED_BY);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<SCREENDC> objSCREENs)        
        {
            int deleteCount = 0;
            foreach (SCREENDC objSCREEN in objSCREENs)
            {
                 deleteCount = Delete(Connection, objSCREEN);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, SCREENDC objSCREEN)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_SCREENSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_SCREEN_ID", DbType.Int32, objSCREEN.SCREEN_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private SCREENDC FillObject(IDataReader reader)
        {
			SCREENDC objSCREEN = null;
            if (reader != null && reader.Read())
            {	
				objSCREEN = new SCREENDC();
				objSCREEN.SCREEN_ID = (int)reader["SCREEN_ID"];
				objSCREEN.SCREEN_NAME = (String)reader["SCREEN_NAME"];
                objSCREEN.IS_EVENT_BASED = reader["IS_EVENT_BASED"] == DBNull.Value ? false : Convert.ToBoolean(reader["IS_EVENT_BASED"]);
				objSCREEN.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objSCREEN.CREATED_BY = (int)reader["CREATED_BY"];
				objSCREEN.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
				objSCREEN.MODIFIED_BY = (int)reader["MODIFIED_BY"];

                reader.Close();
                reader.Dispose();
            }
            return objSCREEN;
        }
		private SCREENDC FillObject(DataRow row)
        {
			SCREENDC objSCREEN = null;
			objSCREEN = new SCREENDC();
			objSCREEN.SCREEN_ID = (int)row["SCREEN_ID"];
			objSCREEN.SCREEN_NAME = (String)row["SCREEN_NAME"];
            objSCREEN.IS_EVENT_BASED = row["IS_EVENT_BASED"] == DBNull.Value ? false : Convert.ToBoolean(row["IS_EVENT_BASED"]);
			objSCREEN.CREATED_ON = (DateTime)row["CREATED_ON"];
			objSCREEN.CREATED_BY = (int)row["CREATED_BY"];
			objSCREEN.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
			objSCREEN.MODIFIED_BY = (int)row["MODIFIED_BY"];

            return objSCREEN;
        }
	}
}
