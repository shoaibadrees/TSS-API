
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:29 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;

namespace EPay.DataAccess
{
    public partial class PERMITDA
    {
        public bool IsDirty { get; set; }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public List<PERMITDC> LoadAll(DBConnection Connection, string projectIDs = "All")
        {
            List<PERMITDC> objPERMIT = new List<PERMITDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSLoadAll");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_projectIDs", DbType.String, projectIDs);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objPERMIT.AddRange(Utility.ConvertToObjects<PERMITDC>(ds.Tables[0]));
            //foreach (DataRow drRow in ds.Tables[0].Rows)
            //{
            //    objPERMIT.Add(FillObject(drRow));
            //}

            return objPERMIT;
        }

        public List<PERMITDC> LoadDashboard(DBConnection Connection, string projectIDs = "All", string permitStatusIDs = "All", string clientIDs = "All", string jobIDs = "All", string submitedStartDt = "All", string submitedEndDt = "All")
        {
            List<PERMITDC> objPERMIT = new List<PERMITDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSLoadDashboard");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_projectIDs", DbType.String, projectIDs);
            dbCommandWrapper.AddInParameter("p_permitStatusIDs", DbType.String, permitStatusIDs);
            dbCommandWrapper.AddInParameter("p_clientIDs", DbType.String, clientIDs);
            dbCommandWrapper.AddInParameter("p_jobIDs", DbType.String, jobIDs);

            DateTime tmDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(submitedStartDt) && DateTime.TryParse(submitedStartDt, out tmDateTime))
                dbCommandWrapper.AddInParameter("p_submitedStartDt", DbType.String, submitedStartDt);

            tmDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(submitedEndDt) && DateTime.TryParse(submitedEndDt, out tmDateTime))
                dbCommandWrapper.AddInParameter("p_submitedEndDt", DbType.String, submitedEndDt);

            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objPERMIT.AddRange(Utility.ConvertToObjects<PERMITDC>(ds.Tables[0]));
            //foreach (DataRow drRow in ds.Tables[0].Rows)
            //{
            //    objPERMIT.Add(FillObject(drRow));
            //}

            return objPERMIT;
        }

        public PERMITDC LoadByPrimaryKey(DBConnection Connection, int PERMIT_ID)
        {
            PERMITDC objPERMIT = new PERMITDC();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSLoadByPrimaryKey");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, PERMIT_ID);

            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objPERMIT = (Utility.ConvertToObject<PERMITDC>(ds.Tables[0]));

            return objPERMIT;
        }

        public int Update(DBConnection Connection, PERMITDC objPERMIT)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT.PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, objPERMIT.PROJECT_ID);
            dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, objPERMIT.JOB_ID);
            dbCommandWrapper.AddInParameter("p_CLIENT", DbType.String, objPERMIT.CLIENT);
            dbCommandWrapper.AddInParameter("p_NODE_ID1", DbType.String, objPERMIT.NODE_ID1);
            dbCommandWrapper.AddInParameter("p_NODE_ID2", DbType.String, objPERMIT.NODE_ID2);
            dbCommandWrapper.AddInParameter("p_NODE_ID3", DbType.String, objPERMIT.NODE_ID3);
            dbCommandWrapper.AddInParameter("p_HUB", DbType.String, objPERMIT.HUB);
            dbCommandWrapper.AddInParameter("p_HYLAN_PM", DbType.Int32, objPERMIT.HYLAN_PM);
            dbCommandWrapper.AddInParameter("p_STREET_ADDRESS", DbType.String, objPERMIT.STREET_ADDRESS);
            dbCommandWrapper.AddInParameter("p_CITY", DbType.String, objPERMIT.CITY);
            dbCommandWrapper.AddInParameter("p_STATE", DbType.String, objPERMIT.STATE);
            dbCommandWrapper.AddInParameter("p_ZIP", DbType.String, objPERMIT.ZIP);
            dbCommandWrapper.AddInParameter("p_LAT", DbType.String, objPERMIT.LAT);
            dbCommandWrapper.AddInParameter("p_LONG", DbType.String, objPERMIT.LONG);
            dbCommandWrapper.AddInParameter("p_POLE_LOCATION", DbType.String, objPERMIT.POLE_LOCATION);
            dbCommandWrapper.AddInParameter("p_PERMIT_NUMBER_TEXT", DbType.String, objPERMIT.PERMIT_NUMBER_TEXT);
            dbCommandWrapper.AddInParameter("p_PERMIT_TYPE", DbType.String, objPERMIT.PERMIT_TYPE);
            dbCommandWrapper.AddInParameter("p_DOT_TRACKING_NUMBER", DbType.String, objPERMIT.DOT_TRACKING_NUMBER);
            dbCommandWrapper.AddInParameter("p_SUBMITTED_DATE", DbType.DateTime, objPERMIT.SUBMITTED_DATE);
            dbCommandWrapper.AddInParameter("p_SEGMENT", DbType.String, objPERMIT.SEGMENT);
            dbCommandWrapper.AddInParameter("p_IS_PROTECTED_STREET", DbType.String, objPERMIT.IS_PROTECTED_STREET);
            dbCommandWrapper.AddInParameter("p_MARKOUT_START_DATE", DbType.DateTime, objPERMIT.MARKOUT_START_DATE);
            dbCommandWrapper.AddInParameter("p_MARKOUT_END_DATE", DbType.DateTime, objPERMIT.MARKOUT_END_DATE);
            dbCommandWrapper.AddInParameter("p_STIPULATION_DAY", DbType.Boolean, objPERMIT.STIPULATION_DAY);
            dbCommandWrapper.AddInParameter("p_STIPULATION_NIGHT", DbType.Boolean, objPERMIT.STIPULATION_NIGHT);
            dbCommandWrapper.AddInParameter("p_STIPULATION_WEEKEND", DbType.Boolean, objPERMIT.STIPULATION_WEEKEND);
            dbCommandWrapper.AddInParameter("p_STIPULATIONS_OTHER", DbType.String, objPERMIT.STIPULATIONS_OTHER);
            dbCommandWrapper.AddInParameter("p_ISSUED_DATE", DbType.DateTime, objPERMIT.ISSUED_DATE);
            dbCommandWrapper.AddInParameter("p_VALID_DATE", DbType.DateTime, objPERMIT.VALID_DATE);
            dbCommandWrapper.AddInParameter("p_EXPIRES_DATE", DbType.DateTime, objPERMIT.EXPIRES_DATE);
            dbCommandWrapper.AddInParameter("p_PERMIT_STATUS", DbType.Int32, objPERMIT.PERMIT_STATUS);
            dbCommandWrapper.AddInParameter("p_NOTES", DbType.String, objPERMIT.NOTES);
            dbCommandWrapper.AddInParameter("p_REJECTED_DATE", DbType.DateTime, objPERMIT.REJECTED_DATE);
            dbCommandWrapper.AddInParameter("p_REJECTED_REASON", DbType.Int32, objPERMIT.REJECTED_REASON);
            dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objPERMIT.CREATED_BY);
            dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objPERMIT.CREATED_ON);
            dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objPERMIT.MODIFIED_BY);
            dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objPERMIT.MODIFIED_ON);
            dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objPERMIT.LOCK_COUNTER);

            dbCommandWrapper.AddInParameter("p_CurrentPage", DbType.String, objPERMIT.CurrentPage);

            try
            {
                if (Connection.Transaction != null)
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

                if (updateCount == 0)
                {
                    objPERMIT.IsDirty = IsDirty = true;
                    throw new Exception(Constants.ConcurrencyMessageSingleRow);
                }
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: JOB UPDATE ", exp.Message + "\r\n" + exp.StackTrace, Convert.ToInt32(objPERMIT.MODIFIED_BY));
                objPERMIT.SetError(exp);
                throw exp;
            }
            return updateCount;
        }

        public List<DD_DTO> GetJobFileNumbers(DBConnection Connection, string projectIDs)
        {
            List<DD_DTO> objDD_DTO = new List<DD_DTO>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSGetJobNumbers");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_PROJECT_IDs", DbType.String, projectIDs);

            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            foreach (DataRow drRow in ds.Tables[0].Rows)
            {
                DD_DTO DD_DTO = new DD_DTO();
                if (drRow.Table.Columns.Contains("JOB_ID"))
                {
                    DD_DTO.VALUE = Convert.ToInt32(drRow["JOB_ID"]);
                }
                if (drRow.Table.Columns.Contains("JOB_FILE_NUMBER"))
                {
                    DD_DTO.TEXT = Convert.ToString(drRow["JOB_FILE_NUMBER"]);
                }
                objDD_DTO.Add(DD_DTO);
            }
            return objDD_DTO;
        }

        //public int Insert(DBConnection Connection, List<PERMITDC> objPERMITs)
        //{
        //    int insertCount = 0;
        //    foreach (PERMITDC objPERMIT in objPERMITs)
        //    {
        //        insertCount = Insert(Connection, objPERMIT);
        //    }
        //    return insertCount;
        //}
        public int Insert(DBConnection Connection, PERMITDC objPERMIT)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PERMITSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT.PERMIT_ID);
            dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, objPERMIT.PROJECT_ID);
            dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, objPERMIT.JOB_ID);
            dbCommandWrapper.AddInParameter("p_CLIENT", DbType.String, objPERMIT.CLIENT);
            dbCommandWrapper.AddInParameter("p_NODE_ID1", DbType.String, objPERMIT.NODE_ID1);
            dbCommandWrapper.AddInParameter("p_NODE_ID2", DbType.String, objPERMIT.NODE_ID2);
            dbCommandWrapper.AddInParameter("p_NODE_ID3", DbType.String, objPERMIT.NODE_ID3);
            dbCommandWrapper.AddInParameter("p_HUB", DbType.String, objPERMIT.HUB);
            dbCommandWrapper.AddInParameter("p_HYLAN_PM", DbType.Int32, objPERMIT.HYLAN_PM);
            dbCommandWrapper.AddInParameter("p_STREET_ADDRESS", DbType.String, objPERMIT.STREET_ADDRESS);
            dbCommandWrapper.AddInParameter("p_CITY", DbType.String, objPERMIT.CITY);
            dbCommandWrapper.AddInParameter("p_STATE", DbType.String, objPERMIT.STATE);
            dbCommandWrapper.AddInParameter("p_ZIP", DbType.String, objPERMIT.ZIP);
            dbCommandWrapper.AddInParameter("p_LAT", DbType.String, objPERMIT.LAT);
            dbCommandWrapper.AddInParameter("p_LONG", DbType.String, objPERMIT.LONG);
            dbCommandWrapper.AddInParameter("p_POLE_LOCATION", DbType.String, objPERMIT.POLE_LOCATION);
            dbCommandWrapper.AddInParameter("p_PERMIT_NUMBER_TEXT", DbType.String, objPERMIT.PERMIT_NUMBER_TEXT);
            dbCommandWrapper.AddInParameter("p_PERMIT_TYPE", DbType.String, objPERMIT.PERMIT_TYPE);
            dbCommandWrapper.AddInParameter("p_DOT_TRACKING_NUMBER", DbType.String, objPERMIT.DOT_TRACKING_NUMBER);
            dbCommandWrapper.AddInParameter("p_SUBMITTED_DATE", DbType.DateTime, objPERMIT.SUBMITTED_DATE);
            dbCommandWrapper.AddInParameter("p_SEGMENT", DbType.String, objPERMIT.SEGMENT);
            dbCommandWrapper.AddInParameter("p_IS_PROTECTED_STREET", DbType.String, objPERMIT.IS_PROTECTED_STREET);
            dbCommandWrapper.AddInParameter("p_MARKOUT_START_DATE", DbType.DateTime, objPERMIT.MARKOUT_START_DATE);
            dbCommandWrapper.AddInParameter("p_MARKOUT_END_DATE", DbType.DateTime, objPERMIT.MARKOUT_END_DATE);
            dbCommandWrapper.AddInParameter("p_STIPULATION_DAY", DbType.Boolean, objPERMIT.STIPULATION_DAY);
            dbCommandWrapper.AddInParameter("p_STIPULATION_NIGHT", DbType.Boolean, objPERMIT.STIPULATION_NIGHT);
            dbCommandWrapper.AddInParameter("p_STIPULATION_WEEKEND", DbType.Boolean, objPERMIT.STIPULATION_WEEKEND);
            dbCommandWrapper.AddInParameter("p_STIPULATIONS_OTHER", DbType.String, objPERMIT.STIPULATIONS_OTHER);
            dbCommandWrapper.AddInParameter("p_ISSUED_DATE", DbType.DateTime, objPERMIT.ISSUED_DATE);
            dbCommandWrapper.AddInParameter("p_VALID_DATE", DbType.DateTime, objPERMIT.VALID_DATE);
            dbCommandWrapper.AddInParameter("p_EXPIRES_DATE", DbType.DateTime, objPERMIT.EXPIRES_DATE);
            dbCommandWrapper.AddInParameter("p_PERMIT_STATUS", DbType.Int32, objPERMIT.PERMIT_STATUS);
            dbCommandWrapper.AddInParameter("p_NOTES", DbType.String, objPERMIT.NOTES);
            dbCommandWrapper.AddInParameter("p_REJECTED_DATE", DbType.DateTime, objPERMIT.REJECTED_DATE);
            dbCommandWrapper.AddInParameter("p_REJECTED_REASON", DbType.Int32, objPERMIT.REJECTED_REASON);
            dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objPERMIT.CREATED_BY);
            dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objPERMIT.CREATED_ON);
            dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objPERMIT.MODIFIED_BY);
            dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objPERMIT.MODIFIED_ON);
            dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objPERMIT.LOCK_COUNTER);

            dbCommandWrapper.AddInParameter("p_IS_PAGE2_FILLED", DbType.Boolean, objPERMIT.IS_PAGE2_FILLED);
            dbCommandWrapper.AddInParameter("p_IsRepeatOperation", DbType.Boolean, objPERMIT.IsRepeatOperation);

            dbCommandWrapper.AddInParameter("p_CurrentPage", DbType.String, objPERMIT.CurrentPage);
            dbCommandWrapper.DBCommand.Parameters["@p_PERMIT_ID"].Direction = ParameterDirection.Output;


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            objPERMIT.PERMIT_ID = Convert.ToInt32(dbCommandWrapper.DBCommand.Parameters["@p_PERMIT_ID"].Value);

            return objPERMIT.PERMIT_ID;
        }

        public int Delete(DBConnection Connection, PERMITDC objPERMIT)
        {
            int deleteCount = 0;
            try
            {
                StringBuilder sql = new StringBuilder();
                sql.Append("proc_PERMITSDelete");

                DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

                dbCommandWrapper.AddInParameter("p_PERMIT_ID", DbType.Int32, objPERMIT.PERMIT_ID);

                if (Connection.Transaction != null)
                    deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: PERMIT DELETE ", exp.Message + "\r\n" + exp.StackTrace, Convert.ToInt32(objPERMIT.MODIFIED_BY));
                objPERMIT.SetError(exp);
                throw exp;
            }
            return deleteCount;
        }
        private PERMITDC FillObject(IDataReader reader)
        {
            PERMITDC objPERMIT = null;
            if (reader != null && reader.Read())
            {
                objPERMIT = new PERMITDC();
                objPERMIT.PERMIT_ID = (int)reader["PERMIT_ID"];
                objPERMIT.PROJECT_ID = reader["PROJECT_ID"] == DBNull.Value ? null : (int?)reader["PROJECT_ID"];
                //objPERMIT.JOB_FILE_NUMBER = reader["JOB_FILE_NUMBER"] == DBNull.Value ? null : (int?)reader["JOB_FILE_NUMBER"];
                objPERMIT.CLIENT = Convert.ToString(reader["CLIENT"]);
                objPERMIT.NODE_ID1 = Convert.ToString(reader["NODE_ID1"]);
                objPERMIT.NODE_ID2 = Convert.ToString(reader["NODE_ID2"]);
                objPERMIT.NODE_ID3 = Convert.ToString(reader["NODE_ID3"]);
                objPERMIT.HUB = Convert.ToString(reader["HUB"]);
                objPERMIT.HYLAN_PM = reader["HYLAN_PM"] == DBNull.Value ? null : (int?)reader["HYLAN_PM"]; 
                objPERMIT.STREET_ADDRESS = Convert.ToString(reader["STREET_ADDRESS"]);
                objPERMIT.CITY = Convert.ToString(reader["CITY"]);
                objPERMIT.STATE = reader["STATE"] == DBNull.Value ? null : (String)reader["STATE"];
                objPERMIT.ZIP = reader["ZIP"] == DBNull.Value ? null : (String)reader["ZIP"];
                objPERMIT.LAT = Convert.ToString(reader["LAT"]);
                objPERMIT.LONG = Convert.ToString(reader["LONG"]);
                objPERMIT.POLE_LOCATION = Convert.ToString(reader["POLE_LOCATION"]);
                objPERMIT.PERMIT_TYPE = reader["PERMIT_NUMBER"] == DBNull.Value ? null : (String)reader["PERMIT_NUMBER"];
                objPERMIT.DOT_TRACKING_NUMBER = reader["DOT_TRACKING_NUMBER"] == DBNull.Value ? null : (String)reader["DOT_TRACKING_NUMBER"];
                objPERMIT.SEGMENT = Convert.ToString(reader["SEGMENT"]);
                objPERMIT.IS_PROTECTED_STREET = reader["IS_PROTECTED_STREET"] == DBNull.Value ? null : (String)reader["IS_PROTECTED_STREET"];
                objPERMIT.MARKOUT_START_DATE = reader["MARKOUT_START_DATE"] == DBNull.Value ? null : (DateTime?)reader["MARKOUT_START_DATE"];
                objPERMIT.MARKOUT_END_DATE = reader["MARKOUT_END_DATE"] == DBNull.Value ? null : (DateTime?)reader["MARKOUT_END_DATE"];
                objPERMIT.STIPULATIONS_OTHER = Convert.ToString(reader["STIPULATIONS"]);
                objPERMIT.ISSUED_DATE = reader["ISSUED_DATE"] == DBNull.Value ? null : (DateTime?)reader["ISSUED_DATE"];
                objPERMIT.VALID_DATE = reader["VALID_DATE"] == DBNull.Value ? null : (DateTime?)reader["VALID_DATE"];
                objPERMIT.EXPIRES_DATE = reader["EXPIRES_DATE"] == DBNull.Value ? null : (DateTime?)reader["EXPIRES_DATE"];
                objPERMIT.PERMIT_STATUS = reader["PERMIT_STATUS"] == DBNull.Value ? null : (int?)reader["PERMIT_STATUS"];
                objPERMIT.NOTES = reader["NOTES"] == DBNull.Value ? null : (String)reader["NOTES"];
                objPERMIT.ATTACHMENTS_COUNT = reader["ATTACHMENTS_COUNT"] == DBNull.Value ? 0 : (int)reader["ATTACHMENTS_COUNT"];
                objPERMIT.CREATED_BY = (int)reader["CREATED_BY"];
                objPERMIT.CREATED_ON = (DateTime)reader["CREATED_ON"];
                objPERMIT.MODIFIED_BY = (int)reader["MODIFIED_BY"];
                objPERMIT.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
                objPERMIT.LOCK_COUNTER = (int)reader["LOCK_COUNTER"];

                reader.Close();
                reader.Dispose();
            }
            return objPERMIT;
        }
        private PERMITDC FillObject(DataRow row)
        {
            PERMITDC objPERMIT = null;
            objPERMIT = new PERMITDC();
            objPERMIT.PERMIT_ID = (int)row["PERMIT_ID"];
            objPERMIT.PROJECT_ID = row["PROJECT_ID"] == DBNull.Value ? null : (int?)row["PROJECT_ID"];
            //objPERMIT.JOB_FILE_NUMBER = row["JOB_FILE_NUMBER"] == DBNull.Value ? null : (int?)row["JOB_FILE_NUMBER"];
            objPERMIT.CLIENT = Convert.ToString(row["CLIENT"]);
            objPERMIT.NODE_ID1 = Convert.ToString(row["NODE_ID1"]);
            objPERMIT.NODE_ID2 = Convert.ToString(row["NODE_ID2"]);
            objPERMIT.NODE_ID3 = Convert.ToString(row["NODE_ID3"]);
            objPERMIT.HUB = Convert.ToString(row["HUB"]);
            objPERMIT.HYLAN_PM = row["HYLAN_PM"] == DBNull.Value ? null : (int?)row["HYLAN_PM"]; 
            objPERMIT.STREET_ADDRESS = Convert.ToString(row["STREET_ADDRESS"]);
            objPERMIT.CITY = Convert.ToString(row["CITY"]);
            objPERMIT.STATE = row["STATE"] == DBNull.Value ? null : (String)row["STATE"];
            objPERMIT.ZIP = row["ZIP"] == DBNull.Value ? null : (String)row["ZIP"];
            objPERMIT.LAT = Convert.ToString(row["LAT"]);
            objPERMIT.LONG = Convert.ToString(row["LONG"]);
            objPERMIT.POLE_LOCATION = Convert.ToString(row["POLE_LOCATION"]);
            objPERMIT.PERMIT_TYPE = row["PERMIT_NUMBER"] == DBNull.Value ? null : (String)row["PERMIT_NUMBER"];
            objPERMIT.DOT_TRACKING_NUMBER = row["DOT_TRACKING_NUMBER"] == DBNull.Value ? null : (String)row["DOT_TRACKING_NUMBER"];
            objPERMIT.SEGMENT = Convert.ToString(row["SEGMENT"]);
            objPERMIT.IS_PROTECTED_STREET = row["IS_PROTECTED_STREET"] == DBNull.Value ? null : (String)row["IS_PROTECTED_STREET"];
            objPERMIT.MARKOUT_START_DATE = row["MARKOUT_START_DATE"] == DBNull.Value ? null : (DateTime?)row["MARKOUT_START_DATE"];
            objPERMIT.MARKOUT_END_DATE = row["MARKOUT_END_DATE"] == DBNull.Value ? null : (DateTime?)row["MARKOUT_END_DATE"];
            objPERMIT.STIPULATIONS_OTHER = Convert.ToString(row["STIPULATIONS"]);
            objPERMIT.ISSUED_DATE = row["ISSUED_DATE"] == DBNull.Value ? null : (DateTime?)row["ISSUED_DATE"];
            objPERMIT.VALID_DATE = row["VALID_DATE"] == DBNull.Value ? null : (DateTime?)row["VALID_DATE"];
            objPERMIT.EXPIRES_DATE = row["EXPIRES_DATE"] == DBNull.Value ? null : (DateTime?)row["EXPIRES_DATE"];
            objPERMIT.PERMIT_STATUS = row["PERMIT_STATUS"] == DBNull.Value ? null : (int?)row["PERMIT_STATUS"];
            objPERMIT.NOTES = row["NOTES"] == DBNull.Value ? null : (String)row["NOTES"];
            objPERMIT.ATTACHMENTS_COUNT = row["ATTACHMENTS_COUNT"] == DBNull.Value ? 0 : (int)row["ATTACHMENTS_COUNT"];
            objPERMIT.CREATED_BY = (int)row["CREATED_BY"];
            objPERMIT.CREATED_ON = (DateTime)row["CREATED_ON"];
            objPERMIT.MODIFIED_BY = (int)row["MODIFIED_BY"];
            objPERMIT.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
            objPERMIT.LOCK_COUNTER = (int)row["LOCK_COUNTER"];

            return objPERMIT;
        }
    }
}
