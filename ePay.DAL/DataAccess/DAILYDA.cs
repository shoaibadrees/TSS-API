
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/6/2017 2:36:35 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;

namespace EPay.DataAccess
{		
	public class DAILYDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<DAILYDC> LoadAll(DBConnection Connection, string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate = "All")
        {
			List<DAILYDC> objDAIL = new List<DAILYDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_DAILYLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_projectIDs", DbType.String, projectIDs);
            dbCommandWrapper.AddInParameter("p_dailyTypeIDs", DbType.String, dailyTypeIDs);
            dbCommandWrapper.AddInParameter("p_statusIDs", DbType.String, statusIDs);
            dbCommandWrapper.AddInParameter("p_shiftIDs", DbType.String, shiftIDs);
            DateTime dailyDateTime = DateTime.MinValue;
            if(!String.IsNullOrEmpty(dailyDate) && DateTime.TryParse(dailyDate,out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, dailyDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, "All");

            dailyDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(dailyEndDate) && DateTime.TryParse(dailyEndDate, out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, dailyEndDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, "All");
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objDAIL.AddRange(Utility.ConvertToObjects<DAILYDC>(ds.Tables[0]));

            return objDAIL;
		}

        //
        public List<DailyHoursReportDC> GetHoursReport(DBConnection Connection, string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate = "All")
        {
            List<DailyHoursReportDC> objDAIL = new List<DailyHoursReportDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_DAILY_HourReport");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_projectIDs", DbType.String, projectIDs);
            dbCommandWrapper.AddInParameter("p_dailyTypeIDs", DbType.String, dailyTypeIDs);
            dbCommandWrapper.AddInParameter("p_statusIDs", DbType.String, statusIDs);
            dbCommandWrapper.AddInParameter("p_shiftIDs", DbType.String, shiftIDs);
            DateTime dailyDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(dailyDate) && DateTime.TryParse(dailyDate, out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, dailyDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, "All");

            dailyDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(dailyEndDate) && DateTime.TryParse(dailyEndDate, out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, dailyEndDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, "All");
            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objDAIL.AddRange(Utility.ConvertToObjects<DailyHoursReportDC>(ds.Tables[0]));

            return objDAIL;
        }


        public DataSet DailyHoursReport(DBConnection Connection, string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate = "All")
        {
            List<DAILYDC> objDAIL = new List<DAILYDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_DAILYLoadAll");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_projectIDs", DbType.String, projectIDs);
            dbCommandWrapper.AddInParameter("p_dailyTypeIDs", DbType.String, dailyTypeIDs);
            dbCommandWrapper.AddInParameter("p_statusIDs", DbType.String, statusIDs);
            dbCommandWrapper.AddInParameter("p_shiftIDs", DbType.String, shiftIDs);
            DateTime dailyDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(dailyDate) && DateTime.TryParse(dailyDate, out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, dailyDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyStartDatePrm", DbType.String, "All");

            dailyDateTime = DateTime.MinValue;
            if (!String.IsNullOrEmpty(dailyEndDate) && DateTime.TryParse(dailyEndDate, out dailyDateTime))
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, dailyEndDate);
            else
                dbCommandWrapper.AddInParameter("p_dailyEndDatePrm", DbType.String, "All");
            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            //objDAIL.AddRange(Utility.ConvertToObjects<DAILYDC>(ds.Tables[0]));

            return ds;
        }

        public DAILYDC LoadByPrimaryKey(DBConnection Connection, int DAILY_ID)
		{
			DAILYDC objDAIL = new DAILYDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_DAILYLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, DAILY_ID);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objDAIL = (Utility.ConvertToObject<DAILYDC>(ds.Tables[0]));
            return objDAIL;
		}

        

        public int Update(DBConnection Connection, DAILYDC objDAIL)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_DAILYUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            int? projId = (objDAIL.PROJECT_ID == -1) ? null : objDAIL.PROJECT_ID;
            int? jobId = (objDAIL.JOB_ID == -1) ? null : objDAIL.JOB_ID;

            dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, objDAIL.DAILY_ID);
            dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, projId);
            dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, jobId);
            dbCommandWrapper.AddInParameter("p_DAILY_TYPE", DbType.Int32, objDAIL.DAILY_TYPE);
			dbCommandWrapper.AddInParameter("p_DAILY_DATE", DbType.DateTime, objDAIL.DAILY_DATE);
			dbCommandWrapper.AddInParameter("p_DAY_OF_WEEK", DbType.String, objDAIL.DAY_OF_WEEK);
			dbCommandWrapper.AddInParameter("p_DAILY_DAYS", DbType.Int32, objDAIL.DAILY_DAYS);
			dbCommandWrapper.AddInParameter("p_STATUS", DbType.Int32, objDAIL.STATUS);
			dbCommandWrapper.AddInParameter("p_SHIFT", DbType.Int32, objDAIL.SHIFT);
			dbCommandWrapper.AddInParameter("p_WORK_ORDER_NUMBER", DbType.String, objDAIL.WORK_ORDER_NUMBER);
			dbCommandWrapper.AddInParameter("p_DAILY_TYPE_NOTES", DbType.String, objDAIL.DAILY_TYPE_NOTES);
            dbCommandWrapper.AddInParameter("p_QUICK_NOTES", DbType.String, objDAIL.QUICK_NOTES);
            dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objDAIL.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objDAIL.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objDAIL.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objDAIL.MODIFIED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objDAIL.LOCK_COUNTER);
            dbCommandWrapper.AddInParameter("p_TRACK_REVENUE", DbType.Decimal, objDAIL.TRACK_REVENUE);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objDAIL.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<DAILYDC> objDAILs)        
        {
            int insertCount = 0;
            foreach (DAILYDC objDAIL in objDAILs)
            {
                 insertCount = Insert(Connection, objDAIL);
            }
            return  insertCount;
        }
		public int Insert(DBConnection Connection, DAILYDC objDAIL)
        {
            int p_DAILY_ID = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_DAILYInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            int? projId = (objDAIL.PROJECT_ID == -1) ? null : objDAIL.PROJECT_ID;
            int? jobId = (objDAIL.JOB_ID == -1) ? null : objDAIL.JOB_ID;


            dbCommandWrapper.AddOutParameter("p_DAILY_ID", DbType.Int32, objDAIL.DAILY_ID);
			dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, projId);
			dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, jobId);
			dbCommandWrapper.AddInParameter("p_DAILY_TYPE", DbType.Int32, objDAIL.DAILY_TYPE);
			dbCommandWrapper.AddInParameter("p_DAILY_DATE", DbType.DateTime, objDAIL.DAILY_DATE);
			dbCommandWrapper.AddInParameter("p_DAY_OF_WEEK", DbType.String, objDAIL.DAY_OF_WEEK);
			dbCommandWrapper.AddInParameter("p_DAILY_DAYS", DbType.Int32, objDAIL.DAILY_DAYS);
			dbCommandWrapper.AddInParameter("p_STATUS", DbType.Int32, objDAIL.STATUS);
			dbCommandWrapper.AddInParameter("p_SHIFT", DbType.Int32, objDAIL.SHIFT);
			dbCommandWrapper.AddInParameter("p_WORK_ORDER_NUMBER", DbType.String, objDAIL.WORK_ORDER_NUMBER);
			dbCommandWrapper.AddInParameter("p_DAILY_TYPE_NOTES", DbType.String, objDAIL.DAILY_TYPE_NOTES);
            dbCommandWrapper.AddInParameter("p_QUICK_NOTES", DbType.String, objDAIL.QUICK_NOTES);
            dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objDAIL.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objDAIL.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objDAIL.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objDAIL.MODIFIED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objDAIL.LOCK_COUNTER);
            dbCommandWrapper.AddInParameter("p_TRACK_REVENUE", DbType.Decimal, objDAIL.TRACK_REVENUE);

            if (Connection.Transaction != null)
                p_DAILY_ID = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                p_DAILY_ID = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            p_DAILY_ID = Convert.ToInt32(dbCommandWrapper.DBCommand.Parameters["@p_DAILY_ID"].Value);
            return p_DAILY_ID;
        }
		public int Delete(DBConnection Connection, ref List<EXCEPTIONDC> lstExceptions, List<DAILYDC> objDAILs)
        {
            int deleteCount = 0;
            foreach (DAILYDC objDAIL in objDAILs)
            {
                try
                {
                    Connection.Open(true);
                    deleteCount = Delete(Connection, objDAIL);
                    Connection.Commit();
                }
                catch (Exception exp)
                {
                    EXCEPTIONDC objExcption = new EXCEPTIONDC();
                    objExcption.FIELD_ID = objDAIL.DAILY_ID;
                    objExcption.EXCEPTION_MESSAGE = exp.Message;
                    objExcption.STACK_TRACK = exp.StackTrace;
                    lstExceptions.Add(objExcption);
                }
                finally { Connection.Close(); }
              }
            
            return deleteCount;
        }
		private int Delete(DBConnection Connection, DAILYDC objDAIL)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_DAILYDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, objDAIL.DAILY_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private DAILYDC FillObject(IDataReader reader)
        {
			DAILYDC objDAIL = null;
            if (reader != null && reader.Read())
            {	
				objDAIL = new DAILYDC();
				objDAIL.DAILY_ID = (int)reader["DAILY_ID"];
				objDAIL.PROJECT_ID = reader["PROJECT_ID"] == DBNull.Value ? null : (int?)reader["PROJECT_ID"];
				objDAIL.JOB_ID = reader["JOB_ID"] == DBNull.Value ? null : (int?)reader["JOB_ID"];
				objDAIL.DAILY_TYPE = (int)reader["DAILY_TYPE"];
				objDAIL.DAILY_DATE = (DateTime)reader["DAILY_DATE"];
				objDAIL.DAY_OF_WEEK = reader["DAY_OF_WEEK"] == DBNull.Value ? null : (String)reader["DAY_OF_WEEK"];
				objDAIL.DAILY_DAYS = (int)reader["DAILY_DAYS"];
				objDAIL.STATUS = (int)reader["STATUS"];
				objDAIL.SHIFT = (int)reader["SHIFT"];
				objDAIL.WORK_ORDER_NUMBER = reader["WORK_ORDER_NUMBER"] == DBNull.Value ? null : (String)reader["WORK_ORDER_NUMBER"];
				objDAIL.DAILY_TYPE_NOTES = reader["DAILY_TYPE_NOTES"] == DBNull.Value ? null : (String)reader["DAILY_TYPE_NOTES"];
				objDAIL.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objDAIL.CREATED_BY = (int)reader["CREATED_BY"];
				objDAIL.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
				objDAIL.MODIFIED_BY = (int)reader["MODIFIED_BY"];
				objDAIL.LOCK_COUNTER = (int)reader["LOCK_COUNTER"];

                reader.Close();
                reader.Dispose();
            }
            return objDAIL;
        }
		private DAILYDC FillObject(DataRow row)
        {
			DAILYDC objDAIL = null;
			objDAIL = new DAILYDC();
			objDAIL.DAILY_ID = (int)row["DAILY_ID"];
			objDAIL.PROJECT_ID = row["PROJECT_ID"] == DBNull.Value ? null : (int?)row["PROJECT_ID"];
			objDAIL.JOB_ID = row["JOB_ID"] == DBNull.Value ? null : (int?)row["JOB_ID"];
			objDAIL.DAILY_TYPE = (int)row["DAILY_TYPE"];
			objDAIL.DAILY_DATE = (DateTime)row["DAILY_DATE"];
			objDAIL.DAY_OF_WEEK = row["DAY_OF_WEEK"] == DBNull.Value ? null : (String)row["DAY_OF_WEEK"];
			objDAIL.DAILY_DAYS = (int)row["DAILY_DAYS"];
			objDAIL.STATUS = (int)row["STATUS"];
			objDAIL.SHIFT = (int)row["SHIFT"];
			objDAIL.WORK_ORDER_NUMBER = row["WORK_ORDER_NUMBER"] == DBNull.Value ? null : (String)row["WORK_ORDER_NUMBER"];
			objDAIL.DAILY_TYPE_NOTES = row["DAILY_TYPE_NOTES"] == DBNull.Value ? null : (String)row["DAILY_TYPE_NOTES"];
			objDAIL.CREATED_ON = (DateTime)row["CREATED_ON"];
			objDAIL.CREATED_BY = (int)row["CREATED_BY"];
			objDAIL.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
			objDAIL.MODIFIED_BY = (int)row["MODIFIED_BY"];
			objDAIL.LOCK_COUNTER = (int)row["LOCK_COUNTER"];

            return objDAIL;
        }
	}
}
