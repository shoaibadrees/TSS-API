
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 3:00:46 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using EPay.DataAccess;
using Microsoft.Practices.EnterpriseLibrary.Data;
using NMART.DataClasses;
namespace NMART.DataAccess
{		
	public class JOB_ATTACHMENTDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<JOB_ATTACHMENTDC> LoadAll(DBConnection Connection)
		{
			List<JOB_ATTACHMENTDC> objJOB_ATTACHMENT = new List<JOB_ATTACHMENTDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_JOB_ATTACHMENTSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objJOB_ATTACHMENT.Add(FillObject(drRow));
				}
				
            return objJOB_ATTACHMENT;
		}
		
		public JOB_ATTACHMENTDC LoadByPrimaryKey(DBConnection Connection, int JOB_ID, int ATTACHMENT_ID)
		{
			JOB_ATTACHMENTDC objJOB_ATTACHMENT = new JOB_ATTACHMENTDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_JOB_ATTACHMENTSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, JOB_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, ATTACHMENT_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objJOB_ATTACHMENT = FillObject(reader);
            return objJOB_ATTACHMENT;
		}
		public int Update(DBConnection Connection, List<JOB_ATTACHMENTDC> objJOB_ATTACHMENTs)        
        {
            int updatedCount = 0;
            foreach (JOB_ATTACHMENTDC objJOB_ATTACHMENT in objJOB_ATTACHMENTs)
            {
                updatedCount = Update(Connection, objJOB_ATTACHMENT);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, JOB_ATTACHMENTDC objJOB_ATTACHMENT)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_JOB_ATTACHMENTSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, objJOB_ATTACHMENT.JOB_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objJOB_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objJOB_ATTACHMENT.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<JOB_ATTACHMENTDC> objJOB_ATTACHMENTs)        
        {
            int insertCount = 0;
            foreach (JOB_ATTACHMENTDC objJOB_ATTACHMENT in objJOB_ATTACHMENTs)
            {
                 insertCount = Insert(Connection, objJOB_ATTACHMENT);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, JOB_ATTACHMENTDC objJOB_ATTACHMENT)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_JOB_ATTACHMENTSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, objJOB_ATTACHMENT.JOB_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objJOB_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<JOB_ATTACHMENTDC> objJOB_ATTACHMENTs)        
        {
            int deleteCount = 0;
            foreach (JOB_ATTACHMENTDC objJOB_ATTACHMENT in objJOB_ATTACHMENTs)
            {
                 deleteCount = Delete(Connection, objJOB_ATTACHMENT);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, JOB_ATTACHMENTDC objJOB_ATTACHMENT)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_JOB_ATTACHMENTSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_JOB_ID", DbType.Int32, objJOB_ATTACHMENT.JOB_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objJOB_ATTACHMENT.ATTACHMENT_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private JOB_ATTACHMENTDC FillObject(IDataReader reader)
        {
			JOB_ATTACHMENTDC objJOB_ATTACHMENT = null;
            if (reader != null && reader.Read())
            {	
				objJOB_ATTACHMENT = new JOB_ATTACHMENTDC();
				objJOB_ATTACHMENT.JOB_ID = (int)reader["JOB_ID"];
				objJOB_ATTACHMENT.ATTACHMENT_ID = (int)reader["ATTACHMENT_ID"];

                reader.Close();
                reader.Dispose();
            }
            return objJOB_ATTACHMENT;
        }
		private JOB_ATTACHMENTDC FillObject(DataRow row)
        {
			JOB_ATTACHMENTDC objJOB_ATTACHMENT = null;
			objJOB_ATTACHMENT = new JOB_ATTACHMENTDC();
			objJOB_ATTACHMENT.JOB_ID = (int)row["JOB_ID"];
			objJOB_ATTACHMENT.ATTACHMENT_ID = (int)row["ATTACHMENT_ID"];

            return objJOB_ATTACHMENT;
        }
	}
}
