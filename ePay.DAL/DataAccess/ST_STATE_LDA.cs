
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 4/16/2015 12:28:35 AM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public class ST_STATE_LDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<ST_STATE_LDC> LoadAll(DBConnection Connection)
		{
			List<ST_STATE_LDC> objST_STATE_L = new List<ST_STATE_LDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_ST_STATE_LULoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objST_STATE_L.Add(FillObject(drRow));
				}
				
            return objST_STATE_L;
		}
		
		public ST_STATE_LDC LoadByPrimaryKey(DBConnection Connection, string ST_STATE)
		{
			ST_STATE_LDC objST_STATE_L = new ST_STATE_LDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_ST_STATE_LULoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_ST_STATE", DbType.String, ST_STATE);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objST_STATE_L = FillObject(reader);
            return objST_STATE_L;
		}
		public int Update(DBConnection Connection, List<ST_STATE_LDC> objST_STATE_Ls)        
        {
            int updatedCount = 0;
            foreach (ST_STATE_LDC objST_STATE_L in objST_STATE_Ls)
            {
                updatedCount = Update(Connection, objST_STATE_L);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, ST_STATE_LDC objST_STATE_L)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ST_STATE_LUUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_ST_STATE", DbType.String, objST_STATE_L.ST_STATE);
			dbCommandWrapper.AddInParameter("p_ST_STATENAME", DbType.String, objST_STATE_L.ST_STATENAME);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objST_STATE_L.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<ST_STATE_LDC> objST_STATE_Ls)        
        {
            int insertCount = 0;
            foreach (ST_STATE_LDC objST_STATE_L in objST_STATE_Ls)
            {
                 insertCount = Insert(Connection, objST_STATE_L);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, ST_STATE_LDC objST_STATE_L)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ST_STATE_LUInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_ST_STATE", DbType.String, objST_STATE_L.ST_STATE);
			dbCommandWrapper.AddInParameter("p_ST_STATENAME", DbType.String, objST_STATE_L.ST_STATENAME);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<ST_STATE_LDC> objST_STATE_Ls)        
        {
            int deleteCount = 0;
            foreach (ST_STATE_LDC objST_STATE_L in objST_STATE_Ls)
            {
                 deleteCount = Delete(Connection, objST_STATE_L);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, ST_STATE_LDC objST_STATE_L)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ST_STATE_LUDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_ST_STATE", DbType.String, objST_STATE_L.ST_STATE);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private ST_STATE_LDC FillObject(IDataReader reader)
        {
			ST_STATE_LDC objST_STATE_L = null;
            if (reader != null && reader.Read())
            {	
				objST_STATE_L = new ST_STATE_LDC();
				objST_STATE_L.ST_STATE = (String)reader["ST_STATE"];
				objST_STATE_L.ST_STATENAME = reader["ST_STATENAME"] == DBNull.Value ? null : (String)reader["ST_STATENAME"];

                reader.Close();
                reader.Dispose();
            }
            return objST_STATE_L;
        }
		private ST_STATE_LDC FillObject(DataRow row)
        {
			ST_STATE_LDC objST_STATE_L = null;
			objST_STATE_L = new ST_STATE_LDC();
			objST_STATE_L.ST_STATE = (String)row["ST_STATE"];
			objST_STATE_L.ST_STATENAME = row["ST_STATENAME"] == DBNull.Value ? null : (String)row["ST_STATENAME"];

            return objST_STATE_L;
        }
	}
}
