
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:27 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public partial class LOOK_UPDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<LOOK_UPDC> LoadAll(DBConnection Connection)
		{
			List<LOOK_UPDC> objLOOK_UP = new List<LOOK_UPDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_LOOK_UPSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objLOOK_UP.Add(FillObject(drRow));
				}
				
            return objLOOK_UP;
		}
		
		public LOOK_UPDC LoadByPrimaryKey(DBConnection Connection, int LOOK_UP_ID)
		{
			LOOK_UPDC objLOOK_UP = new LOOK_UPDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_LOOK_UPSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_LOOK_UP_ID", DbType.Int32, LOOK_UP_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objLOOK_UP = FillObject(reader);
            return objLOOK_UP;
		}
		public int Update(DBConnection Connection, List<LOOK_UPDC> objLOOK_UPs)        
        {
            int updatedCount = 0;
            foreach (LOOK_UPDC objLOOK_UP in objLOOK_UPs)
            {
                updatedCount = Update(Connection, objLOOK_UP);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, LOOK_UPDC objLOOK_UP)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LOOK_UPSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_LOOK_UP_ID", DbType.Int32, objLOOK_UP.LOOK_UP_ID);
			dbCommandWrapper.AddInParameter("p_LU_NAME", DbType.String, objLOOK_UP.LU_NAME);
			dbCommandWrapper.AddInParameter("p_LU_TYPE", DbType.String, objLOOK_UP.LU_TYPE);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objLOOK_UP.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<LOOK_UPDC> objLOOK_UPs)        
        {
            int insertCount = 0;
            foreach (LOOK_UPDC objLOOK_UP in objLOOK_UPs)
            {
                 insertCount = Insert(Connection, objLOOK_UP);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, LOOK_UPDC objLOOK_UP)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LOOK_UPSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_LOOK_UP_ID", DbType.Int32, objLOOK_UP.LOOK_UP_ID);
			dbCommandWrapper.AddInParameter("p_LU_NAME", DbType.String, objLOOK_UP.LU_NAME);
			dbCommandWrapper.AddInParameter("p_LU_TYPE", DbType.String, objLOOK_UP.LU_TYPE);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<LOOK_UPDC> objLOOK_UPs)        
        {
            int deleteCount = 0;
            foreach (LOOK_UPDC objLOOK_UP in objLOOK_UPs)
            {
                 deleteCount = Delete(Connection, objLOOK_UP);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, LOOK_UPDC objLOOK_UP)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LOOK_UPSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_LOOK_UP_ID", DbType.Int32, objLOOK_UP.LOOK_UP_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private LOOK_UPDC FillObject(IDataReader reader)
        {
			LOOK_UPDC objLOOK_UP = null;
            if (reader != null && reader.Read())
            {	
				objLOOK_UP = new LOOK_UPDC();
				objLOOK_UP.LOOK_UP_ID = (int)reader["LOOK_UP_ID"];
				objLOOK_UP.LU_NAME = (String)reader["LU_NAME"];
				objLOOK_UP.LU_TYPE = (String)reader["LU_TYPE"];

                reader.Close();
                reader.Dispose();
            }
            return objLOOK_UP;
        }
		private LOOK_UPDC FillObject(DataRow row)
        {
			LOOK_UPDC objLOOK_UP = null;
			objLOOK_UP = new LOOK_UPDC();
			objLOOK_UP.LOOK_UP_ID = (int)row["LOOK_UP_ID"];
			objLOOK_UP.LU_NAME = (String)row["LU_NAME"];
			objLOOK_UP.LU_TYPE = (String)row["LU_TYPE"];

            return objLOOK_UP;
        }
	}
}
