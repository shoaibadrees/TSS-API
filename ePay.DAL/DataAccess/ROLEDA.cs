
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:27 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using EPay.DataAccess;

namespace EPay.DataAccess
{
    public partial class ROLEDA
    {
        public bool IsDirty { get; set; }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public List<ROLEDC> LoadAll(DBConnection Connection)
        {
            List<ROLEDC> objROLE = new List<ROLEDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ROLESLoadAll");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            foreach (DataRow drRow in ds.Tables[0].Rows)
            {
                objROLE.Add(FillObject(drRow));
            }

            return objROLE;
        }
        public int Update(DBConnection Connection, List<ROLEDC> objROLEs, bool updatePermissions)
        {
            int updatedCount = 0;
            foreach (ROLEDC objROLE in objROLEs)
            {
                updatedCount = Update(Connection, objROLE, updatePermissions);
            }
            return updatedCount;
        }
        public int Update(DBConnection Connection, ROLEDC objROLE, bool updatePermissions)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ROLESUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddInParameter("p_ROLE_ID", DbType.Int32, objROLE.ROLE_ID);
            dbCommandWrapper.AddInParameter("p_ROLE_NAME", DbType.String, objROLE.ROLE_NAME);
            dbCommandWrapper.AddInParameter("p_DESCRIPTION", DbType.String, objROLE.DESCRIPTION);
            dbCommandWrapper.AddInParameter("p_IS_RESTRICTED", DbType.Boolean, objROLE.IS_RESTRICTED);
            dbCommandWrapper.AddInParameter("p_STATUS", DbType.String, objROLE.STATUS);
            dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objROLE.MODIFIED_BY);
            dbCommandWrapper.AddInParameter("p_lock_counter", DbType.Int32, objROLE.LOCK_COUNTER);

            try
            {
                if (Connection.Transaction != null)
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

                if (updateCount == 0)
                {
                    objROLE.IsDirty = IsDirty = true;
                    throw new Exception(Constants.ConcurrencyMessageSingleRow);
                }
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: ROLE UPDATE ", exp.Message + "\r\n" + exp.StackTrace, objROLE.MODIFIED_BY);
                objROLE.SetError(exp);
                throw exp;
            }

            if (updatePermissions && objROLE.PERMISSIONS.Count > 0)
            {
                DataTable dtPermissions = new DataTable();
                dtPermissions.Columns.Add("ROLE_ID");
                dtPermissions.Columns.Add("SCREEN_ID");
                dtPermissions.Columns.Add("PERMISSION_TYPE_ID");
                dtPermissions.Columns.Add("PERMISSION_TYPE");
                dtPermissions.Columns.Add("PERMISSION_TITLE");
                dtPermissions.Columns.Add("GENERAL_EDIT_ACCESS_TYPE");
                dtPermissions.Columns.Add("VIEW_ACCESS_GENERAL");
                dtPermissions.Columns.Add("EDIT_ACCESS");

                foreach (ROLES_PERMISSIONDC permission in objROLE.PERMISSIONS)
                {
                    dtPermissions.Rows.Add(permission.ROLE_ID,
                                            permission.SCREEN_ID,
                                            permission.PERMISSION_TYPE_ID,
                                            permission.PERMISSION_TYPE,
                                            permission.PERMISSION_TITLE,
                                            permission.GENERAL_EDIT_ACCESS_TYPE,
                                            permission.VIEW_ACCESS_GENERAL,
                                            permission.EDIT_ACCESS);
                }

                sql.Clear();
                sql.Append("proc_ROLESUpdateROLES_PERMISSIONS");

                SqlDatabase database = (SqlDatabase)Connection.dataBase;

                DbCommand cmd = database.GetStoredProcCommand(sql.ToString());

                database.AddInParameter(cmd, "p_ROLE_ID", SqlDbType.Int, objROLE.ROLE_ID);
                database.AddInParameter(cmd, "@p_ROLE_PERMISSIONS_TABLE", SqlDbType.Structured, dtPermissions);
                try
                {
                    if (Connection.Transaction != null)
                        updateCount = database.ExecuteNonQuery(cmd, Connection.Transaction);
                    else
                        updateCount = database.ExecuteNonQuery(cmd);

                    if (updateCount == 0)
                    {
                        objROLE.IsDirty = IsDirty = true;
                        throw new Exception(Constants.ConcurrencyMessageSingleRow);
                    }
                }
                catch (Exception exp)
                {
                    //Utilities.InsertIntoErrorLog("Error: ROLES_PERMISSIONS UPDATE ", exp.Message + "\r\n" + exp.StackTrace, objROLE.MODIFIED_BY);
                    objROLE.SetError(exp);
                    throw exp;
                }
            }

            return updateCount;
        }
        //public int Insert(DBConnection Connection, ROLEDC objROLEs)
        //{
        //    int insertCount = 0;
        //    //foreach (ROLEDC objROLE in objROLEs)
        //    //{
        //    insertCount = Insert(Connection, objROLEs);
        //   // }
        //    return insertCount;
        //}
        public int Insert(DBConnection Connection, ROLEDC objROLE)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ROLESInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddOutParameter("p_ROLE_ID", DbType.Int32, objROLE.ROLE_ID);
            dbCommandWrapper.AddInParameter("p_ROLE_NAME", DbType.String, objROLE.ROLE_NAME);
            dbCommandWrapper.AddInParameter("p_DESCRIPTION", DbType.String, objROLE.DESCRIPTION);
            dbCommandWrapper.AddInParameter("p_IS_RESTRICTED", DbType.Boolean, objROLE.IS_RESTRICTED);
            dbCommandWrapper.AddInParameter("p_STATUS", DbType.String, objROLE.STATUS);
            dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objROLE.CREATED_BY);
            dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objROLE.MODIFIED_BY);

            try
            {
                if (Connection.Transaction != null)
                    insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: ROLE INSERTION ", exp.Message + "\r\n" + exp.StackTrace, objROLE.MODIFIED_BY);
                objROLE.SetError(exp);
                throw exp;
            }
            objROLE.ROLE_ID = (int)dbCommandWrapper.DBCommand.Parameters["@p_ROLE_ID"].Value;
            return insertCount;
        }
        public int Delete(DBConnection Connection, List<ROLEDC> objROLEs)
        {
            int deleteCount = 0;
            foreach (ROLEDC objROLE in objROLEs)
            {
                deleteCount = Delete(Connection, objROLE);
            }
            return deleteCount;
        }
        private int Delete(DBConnection Connection, ROLEDC objROLE)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_ROLESDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);

            dbCommandWrapper.AddInParameter("p_ROLE_ID", DbType.Int32, objROLE.ROLE_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
        private ROLEDC FillObject(IDataReader reader)
        {
            ROLEDC objROLE = null;
            if (reader != null && reader.Read())
            {
                objROLE = new ROLEDC();
                objROLE.ROLE_ID = (int)reader["ROLE_ID"];
                objROLE.ROLE_NAME = (String)reader["ROLE_NAME"];
                objROLE.DESCRIPTION = (String)reader["DESCRIPTION"];
                objROLE.IS_RESTRICTED = (Boolean)reader["IS_RESTRICTED"];
                objROLE.STATUS = (String)reader["STATUS"];
                objROLE.CREATED_ON = (DateTime)reader["CREATED_ON"];
                objROLE.CREATED_BY = (int)reader["CREATED_BY"];
                objROLE.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
                objROLE.MODIFIED_BY = (int)reader["MODIFIED_BY"];
                objROLE.LOCK_COUNTER = (!string.IsNullOrEmpty(reader["LOCK_COUNTER"].ToString()) ? (int)reader["LOCK_COUNTER"] : 0);
                objROLE.IS_ADMIN = (Boolean)reader["IS_ADMIN"];
                reader.Close();
                reader.Dispose();
            }
            return objROLE;
        }
        private ROLEDC FillObject(DataRow row)
        {
            ROLEDC objROLE = null;
            objROLE = new ROLEDC();
            objROLE.ROLE_ID = (int)row["ROLE_ID"];
            objROLE.ROLE_NAME = (String)row["ROLE_NAME"];
            objROLE.DESCRIPTION = (String)row["DESCRIPTION"];
            objROLE.IS_RESTRICTED = (Boolean)row["IS_RESTRICTED"];
            objROLE.STATUS = (String)row["STATUS"];
            objROLE.CREATED_ON = (DateTime)row["CREATED_ON"];
            objROLE.CREATED_BY = (int)row["CREATED_BY"];
            objROLE.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
            objROLE.MODIFIED_BY = (int)row["MODIFIED_BY"];
            objROLE.LOCK_COUNTER = (!string.IsNullOrEmpty(row["LOCK_COUNTER"].ToString()) ? (int)row["LOCK_COUNTER"] : 0);
            objROLE.IS_ADMIN = (Boolean)row["IS_ADMIN"];
            return objROLE;
        }
    }
}
