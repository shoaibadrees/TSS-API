
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/6/2017 2:36:35 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;

namespace EPay.DataAccess
{		
	public class LABORDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<LABORDC> LoadAll(DBConnection Connection)
		{
			List<LABORDC> objLABOR_VALU = new List<LABORDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_LABOR_VALUELoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objLABOR_VALU.Add(FillObject(drRow));
				}
				
            return objLABOR_VALU;
		}
		
		public LABORDC LoadByPrimaryKey(DBConnection Connection, int LABOR_VALUE_ID)
		{
			LABORDC objLABOR_VALU = new LABORDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_LABOR_VALUELoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_LABOR_VALUE_ID", DbType.Int32, LABOR_VALUE_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objLABOR_VALU = FillObject(reader);
            return objLABOR_VALU;
		}
        public List<LABORDC> LoadByDailyIDAndType(DBConnection Connection, int DAILY_ID, int DAILY_TYPE)
        {
            List<LABORDC> objLABOR_VALU = new List<LABORDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LABOR_VALUELoadByDailyIDAndType");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, DAILY_ID);
            dbCommandWrapper.AddInParameter("p_DAILY_TYPE", DbType.Int32, DAILY_TYPE);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objLABOR_VALU = (Utility.ConvertToObjects<LABORDC>(ds.Tables[0]));


            return objLABOR_VALU;
        }

        public List<LABORDC> GetLaborFromManPower(DBConnection Connection, int DAILY_ID, int DAILY_TYPE)
        {
            List<LABORDC> objLABOR_VALU = new List<LABORDC>();
            StringBuilder sql = new StringBuilder();
            sql.Append("proc_getLaborHoursFromManpower");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, DAILY_ID);
            dbCommandWrapper.AddInParameter("p_DAILY_TYPE", DbType.Int32, DAILY_TYPE);


            DataSet ds = new DataSet();

            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            objLABOR_VALU = (Utility.ConvertToObjects<LABORDC>(ds.Tables[0]));


            return objLABOR_VALU;
        }
        public int Update(DBConnection Connection, List<LABORDC> objLABOR_VALUs)        
        {
            int updatedCount = 0;
            foreach (LABORDC objLABOR_VALU in objLABOR_VALUs)
            {
                updatedCount = Update(Connection, objLABOR_VALU);
            }
            return updatedCount;
        }
		public int Update(DBConnection Connection, LABORDC objLABOR_VALU)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LABOR_VALUEUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_LABOR_VALUE_ID", DbType.Int32, objLABOR_VALU.LABOR_VALUE_ID);
			dbCommandWrapper.AddInParameter("p_LABOR_ID", DbType.Int32, objLABOR_VALU.LABOR_ID);
			dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, objLABOR_VALU.DAILY_ID);
			dbCommandWrapper.AddInParameter("p_HOURS", DbType.Decimal, objLABOR_VALU.HOURS);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objLABOR_VALU.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objLABOR_VALU.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objLABOR_VALU.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objLABOR_VALU.MODIFIED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objLABOR_VALU.LOCK_COUNTER);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objLABOR_VALU.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<LABORDC> objLABOR_VALUs)        
        {
            int insertCount = 0;
            foreach (LABORDC objLABOR_VALU in objLABOR_VALUs)
            {
                 insertCount = Insert(Connection, objLABOR_VALU);
            }
            return  insertCount;
        }
		public int Insert(DBConnection Connection, LABORDC objLABOR_VALU)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LABOR_VALUEInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddOutParameter("p_LABOR_VALUE_ID", DbType.Int32, objLABOR_VALU.LABOR_VALUE_ID);
			dbCommandWrapper.AddInParameter("p_LABOR_ID", DbType.Int32, objLABOR_VALU.LABOR_ID);
			dbCommandWrapper.AddInParameter("p_DAILY_ID", DbType.Int32, objLABOR_VALU.DAILY_ID);
			dbCommandWrapper.AddInParameter("p_HOURS", DbType.Decimal, objLABOR_VALU.HOURS);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objLABOR_VALU.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objLABOR_VALU.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objLABOR_VALU.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objLABOR_VALU.MODIFIED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objLABOR_VALU.LOCK_COUNTER);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<LABORDC> objLABOR_VALUs)        
        {
            int deleteCount = 0;
            foreach (LABORDC objLABOR_VALU in objLABOR_VALUs)
            {
                 deleteCount = Delete(Connection, objLABOR_VALU);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, LABORDC objLABOR_VALU)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_LABOR_VALUEDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_LABOR_VALUE_ID", DbType.Int32, objLABOR_VALU.LABOR_VALUE_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private LABORDC FillObject(IDataReader reader)
        {
			LABORDC objLABOR_VALU = null;
            if (reader != null && reader.Read())
            {	
				objLABOR_VALU = new LABORDC();
				objLABOR_VALU.LABOR_VALUE_ID = (int)reader["LABOR_VALUE_ID"];
				objLABOR_VALU.LABOR_ID = (int)reader["LABOR_ID"];
				objLABOR_VALU.DAILY_ID = (int)reader["DAILY_ID"];
				objLABOR_VALU.HOURS = (Decimal)reader["HOURS"];
				objLABOR_VALU.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objLABOR_VALU.CREATED_BY = (int)reader["CREATED_BY"];
				objLABOR_VALU.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
				objLABOR_VALU.MODIFIED_BY = (int)reader["MODIFIED_BY"];
				objLABOR_VALU.LOCK_COUNTER = (int)reader["LOCK_COUNTER"];

                reader.Close();
                reader.Dispose();
            }
            return objLABOR_VALU;
        }
		private LABORDC FillObject(DataRow row)
        {
			LABORDC objLABOR_VALU = null;
			objLABOR_VALU = new LABORDC();
			objLABOR_VALU.LABOR_VALUE_ID = (int)row["LABOR_VALUE_ID"];
			objLABOR_VALU.LABOR_ID = (int)row["LABOR_ID"];
			objLABOR_VALU.DAILY_ID = (int)row["DAILY_ID"];
			objLABOR_VALU.HOURS = (Decimal)row["HOURS"];
			objLABOR_VALU.CREATED_ON = (DateTime)row["CREATED_ON"];
			objLABOR_VALU.CREATED_BY = (int)row["CREATED_BY"];
			objLABOR_VALU.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
			objLABOR_VALU.MODIFIED_BY = (int)row["MODIFIED_BY"];
			objLABOR_VALU.LOCK_COUNTER = (int)row["LOCK_COUNTER"];

            return objLABOR_VALU;
        }
	}
}
