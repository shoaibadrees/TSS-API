
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:29 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{
    public partial class USERS_COMPANIEDA
    {
        public USERS_COMPANIEDC LoadByUserID(int USER_ID, string accessType, DBConnection Connection)
        {
            USERS_COMPANIEDC objUSERS_COMPANIE = new USERS_COMPANIEDC();
            StringBuilder sql = new StringBuilder();
            sql.Append("[proc_USERS_COMPANIESLoadByUserID]");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("p_USER_ID", DbType.Int32, USER_ID);
            dbCommandWrapper.AddInParameter("p_Access_Type", DbType.String, accessType);

            DataSet ds = new DataSet();
            if (Connection.Transaction != null)
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            var enumerableDT = ds.Tables[0].AsEnumerable();
            var companyIDs = enumerableDT.GroupBy(row => row.Field<int>("COMPANY_ID"));
            foreach (var compID in companyIDs)
            {
                COMPANIEDC objNewComp = new COMPANIEDC();
                //var rmags = enumerableDT.Where(row => row.Field<int>("COMPANY_ID") == compID.Key);
                //foreach (var rmag in rmags)
                //{
                //    RMAGDC objNewRmag = new RMAGDC();
                //    objNewRmag.RMAG_ID = rmag.Field<int>("RMAG_ID");
                //    objNewRmag.RMAG_NAME = rmag.Field<string>("RMAG_NAME");
                //    objNewComp.COMPANYRMAGS.Add(objNewRmag);
                //}
                
                var firstRed = enumerableDT.Where(row => row.Field<int>("COMPANY_ID") == compID.Key).FirstOrDefault();
                objNewComp.COMPANY_ID = firstRed.Field<int>("COMPANY_ID");
                objNewComp.COMPANY_NAME = firstRed.Field<string>("COMPANY_NAME");
                objNewComp.PRIMARY_CONTACT_NAME = firstRed.Field<string>("PRIMARY_CONTACT_NAME");
                objNewComp.PRIMARY_CONTACT_EMAIL = firstRed.Field<string>("PRIMARY_CONTACT_EMAIL");
                objNewComp.COMPANY_CITY = firstRed.Field<string>("COMPANY_CITY");
                objNewComp.COMPANY_STATE = firstRed.Field<string>("COMPANY_STATE");
                objNewComp.COMPANY_ZIP = firstRed.Field<string>("COMPANY_ZIP");
                objNewComp.COMPANY_ADDRESS = firstRed.Field<string>("COMPANY_ADDRESS");
                objNewComp.COMPANY_PHONE_NUMBER = firstRed.Field<string>("COMPANY_PHONE_NUMBER");
                //objNewComp.HOME_RMAG = firstRed.Field<int>("HOME_RMAG");
                //objNewComp.COMPANY_HOME_RMAG_NAME = firstRed.Field<string>("COMPANY_HOME_RMAG_NAME");
                objUSERS_COMPANIE.COMPANY.Add(objNewComp);
            }

            return objUSERS_COMPANIE;
        }

        public int CheckCompanyAssociation(int CompanyID, DBConnection Connection)
        {
            USERS_COMPANIEDC objUSERS_COMPANIE = new USERS_COMPANIEDC();
            StringBuilder sql = new StringBuilder();
            int associatedRowsCount = 0;
            sql.Append("[proc_CheckCompanyAssociation]");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            dbCommandWrapper.AddInParameter("CompanyID", DbType.Int32, CompanyID);

            associatedRowsCount = Convert.ToInt32(Connection.dataBase.ExecuteScalar(dbCommandWrapper.DBCommand));
            
            return associatedRowsCount;
        }

    }
}
