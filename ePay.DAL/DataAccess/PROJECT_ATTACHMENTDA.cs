
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 3:00:46 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using EPay.DataAccess;
using Microsoft.Practices.EnterpriseLibrary.Data;
using NMART.DataClasses;
namespace NMART.DataAccess
{		
	public class PROJECT_ATTACHMENTDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<PROJECT_ATTACHMENTDC> LoadAll(DBConnection Connection)
		{
			List<PROJECT_ATTACHMENTDC> objPROJECT_ATTACHMENT = new List<PROJECT_ATTACHMENTDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_PROJECT_ATTACHMENTSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objPROJECT_ATTACHMENT.Add(FillObject(drRow));
				}
				
            return objPROJECT_ATTACHMENT;
		}
		
		public PROJECT_ATTACHMENTDC LoadByPrimaryKey(DBConnection Connection, int PROJECT_ID, int ATTACHMENT_ID)
		{
			PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT = new PROJECT_ATTACHMENTDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_PROJECT_ATTACHMENTSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, PROJECT_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, ATTACHMENT_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objPROJECT_ATTACHMENT = FillObject(reader);
            return objPROJECT_ATTACHMENT;
		}
		public int Update(DBConnection Connection, List<PROJECT_ATTACHMENTDC> objPROJECT_ATTACHMENTs)        
        {
            int updatedCount = 0;
            foreach (PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT in objPROJECT_ATTACHMENTs)
            {
                updatedCount = Update(Connection, objPROJECT_ATTACHMENT);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PROJECT_ATTACHMENTSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, objPROJECT_ATTACHMENT.PROJECT_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPROJECT_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objPROJECT_ATTACHMENT.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<PROJECT_ATTACHMENTDC> objPROJECT_ATTACHMENTs)        
        {
            int insertCount = 0;
            foreach (PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT in objPROJECT_ATTACHMENTs)
            {
                 insertCount = Insert(Connection, objPROJECT_ATTACHMENT);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PROJECT_ATTACHMENTSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, objPROJECT_ATTACHMENT.PROJECT_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPROJECT_ATTACHMENT.ATTACHMENT_ID);


            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<PROJECT_ATTACHMENTDC> objPROJECT_ATTACHMENTs)        
        {
            int deleteCount = 0;
            foreach (PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT in objPROJECT_ATTACHMENTs)
            {
                 deleteCount = Delete(Connection, objPROJECT_ATTACHMENT);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_PROJECT_ATTACHMENTSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_PROJECT_ID", DbType.Int32, objPROJECT_ATTACHMENT.PROJECT_ID);
			dbCommandWrapper.AddInParameter("p_ATTACHMENT_ID", DbType.Int32, objPROJECT_ATTACHMENT.ATTACHMENT_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private PROJECT_ATTACHMENTDC FillObject(IDataReader reader)
        {
			PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT = null;
            if (reader != null && reader.Read())
            {	
				objPROJECT_ATTACHMENT = new PROJECT_ATTACHMENTDC();
				objPROJECT_ATTACHMENT.PROJECT_ID = (int)reader["PROJECT_ID"];
				objPROJECT_ATTACHMENT.ATTACHMENT_ID = (int)reader["ATTACHMENT_ID"];

                reader.Close();
                reader.Dispose();
            }
            return objPROJECT_ATTACHMENT;
        }
		private PROJECT_ATTACHMENTDC FillObject(DataRow row)
        {
			PROJECT_ATTACHMENTDC objPROJECT_ATTACHMENT = null;
			objPROJECT_ATTACHMENT = new PROJECT_ATTACHMENTDC();
			objPROJECT_ATTACHMENT.PROJECT_ID = (int)row["PROJECT_ID"];
			objPROJECT_ATTACHMENT.ATTACHMENT_ID = (int)row["ATTACHMENT_ID"];

            return objPROJECT_ATTACHMENT;
        }
	}
}
