
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:01:26 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
using EPay.Common;
using EPay.DataAccess;

namespace EPay.DataAccess
{		
	public partial class COMPANIEDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<COMPANIEDC> LoadAll(DBConnection Connection)
		{
			List<COMPANIEDC> objCOMPANIE = new List<COMPANIEDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_COMPANIESLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);

            foreach (DataRow drRow in ds.Tables[0].Rows)
            {
                objCOMPANIE.Add(FillObject(drRow));
            }

            return objCOMPANIE;
		}
		
		public COMPANIEDC LoadByPrimaryKey(DBConnection Connection, int COMPANY_ID)
		{
			COMPANIEDC objCOMPANIE = new COMPANIEDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_COMPANIESLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_COMPANY_ID", DbType.Int32, COMPANY_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			//objCOMPANIE = FillObject(reader);
            return objCOMPANIE;
		}
		
		public int Update(DBConnection Connection, COMPANIEDC objCOMPANIE)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_COMPANIESUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			            
			dbCommandWrapper.AddInParameter("p_COMPANY_ID", DbType.Int32, objCOMPANIE.COMPANY_ID);
			dbCommandWrapper.AddInParameter("p_COMPANY_NAME", DbType.String, objCOMPANIE.COMPANY_NAME);
			//dbCommandWrapper.AddInParameter("p_TOTAL_CUSTOMERS", DbType.Int64, objCOMPANIE.TOTAL_CUSTOMERS);
			//dbCommandWrapper.AddInParameter("p_HOME_RMAG", DbType.Int32, objCOMPANIE.HOME_RMAG);
			dbCommandWrapper.AddInParameter("p_COMPANY_PHONE_NUMBER", DbType.String, objCOMPANIE.COMPANY_PHONE_NUMBER);
			dbCommandWrapper.AddInParameter("p_PRIMARY_CONTACT_NAME", DbType.String, objCOMPANIE.PRIMARY_CONTACT_NAME);
			dbCommandWrapper.AddInParameter("p_PRIMARY_CONTACT_EMAIL", DbType.String, objCOMPANIE.PRIMARY_CONTACT_EMAIL);
            dbCommandWrapper.AddInParameter("p_COMPANY_CITY", DbType.String, objCOMPANIE.COMPANY_CITY);
            if (!string.IsNullOrEmpty(objCOMPANIE.COMPANY_STATE))
            {
                dbCommandWrapper.AddInParameter("p_COMPANY_STATE", DbType.String, objCOMPANIE.COMPANY_STATE);
            }
            else
            {
                dbCommandWrapper.AddInParameter("p_COMPANY_STATE", DbType.String, DBNull.Value);
            }
            dbCommandWrapper.AddInParameter("p_COMPANY_ZIP", DbType.String, objCOMPANIE.COMPANY_ZIP);
            dbCommandWrapper.AddInParameter("p_COMPANY_ADDRESS", DbType.String, objCOMPANIE.COMPANY_ADDRESS);
            dbCommandWrapper.AddInParameter("p_STATUS", DbType.String, objCOMPANIE.STATUS);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objCOMPANIE.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objCOMPANIE.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objCOMPANIE.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objCOMPANIE.MODIFIED_BY);
            //dbCommandWrapper.AddInParameter("p_RMAGS", DbType.String, string.Join(",", objCOMPANIE.RMAGS));

            dbCommandWrapper.AddInParameter("p_BILLING_CONTACT_NAME", DbType.String, objCOMPANIE.BILLING_CONTACT_NAME);
            dbCommandWrapper.AddInParameter("p_BILLING_PHONE", DbType.String, objCOMPANIE.BILLING_PHONE);
            dbCommandWrapper.AddInParameter("p_BILLING_CONTACT_EMAIL", DbType.String, objCOMPANIE.BILLING_CONTACT_EMAIL);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_NAME", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_NAME);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_PHONE", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_PHONE);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_EMAIL", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_EMAIL);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_NAME", DbType.String, objCOMPANIE.PROJECT_MANAGER_NAME);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_PHONE", DbType.String, objCOMPANIE.PROJECT_MANAGER_PHONE);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_EMAIL", DbType.String, objCOMPANIE.PROJECT_MANAGER_EMAIL);

            dbCommandWrapper.AddInParameter("p_lock_counter", DbType.Int32, objCOMPANIE.LOCK_COUNTER);
            
            try
            {
                if (Connection.Transaction != null)
                {
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                }
                else
                    updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

                if (updateCount == 0)
                {
                    objCOMPANIE.IsDirty = IsDirty = true;
                    throw new Exception(Constants.ConcurrencyMessageSingleRow);
                }
            }
            catch (Exception exp)
            {
               // Utilities.InsertIntoErrorLog("Error: CLIENTS UPDATE ", exp.Message + "\r\n" + exp.StackTrace, objCOMPANIE.MODIFIED_BY);
                objCOMPANIE.SetError(exp);
                throw exp;
            }
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<COMPANIEDC> objCOMPANIEs)        
        {
            int insertCount = 0;
            foreach (COMPANIEDC objCOMPANIE in objCOMPANIEs)
            {
                 insertCount = Insert(Connection, objCOMPANIE);
            }
            return  insertCount;
        }
		public int Insert(DBConnection Connection, COMPANIEDC objCOMPANIE)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_COMPANIESInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);


            dbCommandWrapper.AddOutParameter("p_COMPANY_ID", DbType.Int32, objCOMPANIE.COMPANY_ID);
			dbCommandWrapper.AddInParameter("p_COMPANY_NAME", DbType.String, objCOMPANIE.COMPANY_NAME);
			//dbCommandWrapper.AddInParameter("p_TOTAL_CUSTOMERS", DbType.Int64, objCOMPANIE.TOTAL_CUSTOMERS);
			//dbCommandWrapper.AddInParameter("p_HOME_RMAG", DbType.Int32, objCOMPANIE.HOME_RMAG);
			dbCommandWrapper.AddInParameter("p_COMPANY_PHONE_NUMBER", DbType.String, objCOMPANIE.COMPANY_PHONE_NUMBER);
			dbCommandWrapper.AddInParameter("p_PRIMARY_CONTACT_NAME", DbType.String, objCOMPANIE.PRIMARY_CONTACT_NAME);
			dbCommandWrapper.AddInParameter("p_PRIMARY_CONTACT_EMAIL", DbType.String, objCOMPANIE.PRIMARY_CONTACT_EMAIL);
            dbCommandWrapper.AddInParameter("p_COMPANY_CITY", DbType.String, objCOMPANIE.COMPANY_CITY);
            if (!string.IsNullOrEmpty(objCOMPANIE.COMPANY_STATE))
            {
                dbCommandWrapper.AddInParameter("p_COMPANY_STATE", DbType.String, objCOMPANIE.COMPANY_STATE);
            }
            else
            {
                dbCommandWrapper.AddInParameter("p_COMPANY_STATE", DbType.String, DBNull.Value);
            }
            dbCommandWrapper.AddInParameter("p_COMPANY_ZIP", DbType.String, objCOMPANIE.COMPANY_ZIP);
            dbCommandWrapper.AddInParameter("p_COMPANY_ADDRESS", DbType.String, objCOMPANIE.COMPANY_ADDRESS);
            dbCommandWrapper.AddInParameter("p_STATUS", DbType.String, objCOMPANIE.STATUS);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objCOMPANIE.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objCOMPANIE.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objCOMPANIE.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objCOMPANIE.MODIFIED_BY);

            dbCommandWrapper.AddInParameter("p_BILLING_CONTACT_NAME", DbType.String, objCOMPANIE.BILLING_CONTACT_NAME);
            dbCommandWrapper.AddInParameter("p_BILLING_PHONE", DbType.String, objCOMPANIE.BILLING_PHONE);
            dbCommandWrapper.AddInParameter("p_BILLING_CONTACT_EMAIL", DbType.String, objCOMPANIE.BILLING_CONTACT_EMAIL);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_NAME", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_NAME);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_PHONE", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_PHONE);
            dbCommandWrapper.AddInParameter("p_PROJECT_DIRECTOR_EMAIL", DbType.String, objCOMPANIE.PROJECT_DIRECTOR_EMAIL);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_NAME", DbType.String, objCOMPANIE.PROJECT_MANAGER_NAME);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_PHONE", DbType.String, objCOMPANIE.PROJECT_MANAGER_PHONE);
            dbCommandWrapper.AddInParameter("p_PROJECT_MANAGER_EMAIL", DbType.String, objCOMPANIE.PROJECT_MANAGER_EMAIL);

            try
            {
                if (Connection.Transaction != null)
                    insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
                else
                    insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
            }
            catch (Exception exp)
            {
                //Utilities.InsertIntoErrorLog("Error: CLIENTS INSERTION ", exp.Message + "\r\n" + exp.StackTrace, objCOMPANIE.MODIFIED_BY);
                objCOMPANIE.SetError(exp);
                throw exp;
            }
            objCOMPANIE.COMPANY_ID = (int)dbCommandWrapper.DBCommand.Parameters["@p_COMPANY_ID"].Value;
            return insertCount;
        }
		public int Delete(DBConnection Connection, List<COMPANIEDC> objCOMPANIEs)        
        {
            int deleteCount = 0;
            foreach (COMPANIEDC objCOMPANIE in objCOMPANIEs)
            {
                 deleteCount = Delete(Connection, objCOMPANIE);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, COMPANIEDC objCOMPANIE)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_COMPANIESDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_COMPANY_ID", DbType.Int32, objCOMPANIE.COMPANY_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		

	}
}
