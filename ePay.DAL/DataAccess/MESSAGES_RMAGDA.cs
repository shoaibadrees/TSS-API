
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 5/2/2015 5:37:24 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using EPay.DataClasses;
namespace EPay.DataAccess
{		
	public partial class MESSAGES_RMAGDA
	{
		public bool IsDirty {get; set;}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public List<MESSAGES_RMAGDC> LoadAll(DBConnection Connection)
		{
			List<MESSAGES_RMAGDC> objMESSAGES_RMAG = new List<MESSAGES_RMAGDC>();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_MESSAGES_RMAGSLoadAll");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
 
 
            DataSet ds = new DataSet();
			
			if (Connection.Transaction != null)
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				ds = Connection.dataBase.ExecuteDataSet(dbCommandWrapper.DBCommand);
			
			  foreach (DataRow drRow in ds.Tables[0].Rows)
                {
				objMESSAGES_RMAG.Add(FillObject(drRow));
				}
				
            return objMESSAGES_RMAG;
		}
		
		public MESSAGES_RMAGDC LoadByPrimaryKey(DBConnection Connection, int MESSAGE_RMAG_ID)
		{
			MESSAGES_RMAGDC objMESSAGES_RMAG = new MESSAGES_RMAGDC();
			StringBuilder sql = new StringBuilder();
			sql.Append("proc_MESSAGES_RMAGSLoadByPrimaryKey");

			DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
						dbCommandWrapper.AddInParameter("p_MESSAGE_RMAG_ID", DbType.Int32, MESSAGE_RMAG_ID);
 				

			IDataReader reader = null;

			if (Connection.Transaction != null)
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand, Connection.Transaction);
			else
				reader = Connection.dataBase.ExecuteReader(dbCommandWrapper.DBCommand);

			objMESSAGES_RMAG = FillObject(reader);
            return objMESSAGES_RMAG;
		}
		public int Update(DBConnection Connection, List<MESSAGES_RMAGDC> objMESSAGES_RMAGs)        
        {
            int updatedCount = 0;
            foreach (MESSAGES_RMAGDC objMESSAGES_RMAG in objMESSAGES_RMAGs)
            {
                updatedCount = Update(Connection, objMESSAGES_RMAG);
            }
            return updatedCount;
        }
		private int Update(DBConnection Connection, MESSAGES_RMAGDC objMESSAGES_RMAG)
        {
            int updateCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_MESSAGES_RMAGSUpdate");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_MESSAGE_RMAG_ID", DbType.Int32, objMESSAGES_RMAG.MESSAGE_RMAG_ID);
			dbCommandWrapper.AddInParameter("p_MESSAGE_ID", DbType.Int32, objMESSAGES_RMAG.MESSAGE_ID);
			dbCommandWrapper.AddInParameter("p_RMAG_ID", DbType.Int32, objMESSAGES_RMAG.RMAG_ID);
			dbCommandWrapper.AddInParameter("p_CREATED_ON", DbType.DateTime, objMESSAGES_RMAG.CREATED_ON);
			dbCommandWrapper.AddInParameter("p_CREATED_BY", DbType.Int32, objMESSAGES_RMAG.CREATED_BY);
			dbCommandWrapper.AddInParameter("p_MODIFIED_ON", DbType.DateTime, objMESSAGES_RMAG.MODIFIED_ON);
			dbCommandWrapper.AddInParameter("p_MODIFIED_BY", DbType.Int32, objMESSAGES_RMAG.MODIFIED_BY);
			dbCommandWrapper.AddInParameter("p_LOCK_COUNTER", DbType.Int32, objMESSAGES_RMAG.LOCK_COUNTER);


            if (Connection.Transaction != null)
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                updateCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);
			
			if (updateCount == 0)
                objMESSAGES_RMAG.IsDirty = IsDirty = true;
            
			return updateCount;
        }
		public int Insert(DBConnection Connection, List<MESSAGES_RMAGDC> objMESSAGES_RMAGs)        
        {
            int insertCount = 0;
            foreach (MESSAGES_RMAGDC objMESSAGES_RMAG in objMESSAGES_RMAGs)
            {
                 insertCount = Insert(Connection, objMESSAGES_RMAG);
            }
            return  insertCount;
        }
		private int Insert(DBConnection Connection, MESSAGES_RMAGDC objMESSAGES_RMAG)
        {
            int insertCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_MESSAGES_RMAGSInsert");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
			
            
			dbCommandWrapper.AddInParameter("p_MESSAGE_RMAG_ID", DbType.Int32, objMESSAGES_RMAG.MESSAGE_RMAG_ID);
			dbCommandWrapper.AddInParameter("p_MESSAGE_ID", DbType.Int32, objMESSAGES_RMAG.MESSAGE_ID);
			dbCommandWrapper.AddInParameter("p_RMAG_ID", DbType.Int32, objMESSAGES_RMAG.RMAG_ID);

            if (Connection.Transaction != null)
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                insertCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return insertCount;
        }
		public int Delete(DBConnection Connection, List<MESSAGES_RMAGDC> objMESSAGES_RMAGs)        
        {
            int deleteCount = 0;
            foreach (MESSAGES_RMAGDC objMESSAGES_RMAG in objMESSAGES_RMAGs)
            {
                 deleteCount = Delete(Connection, objMESSAGES_RMAG);
            }
            return  deleteCount;
        }
		private int Delete(DBConnection Connection, MESSAGES_RMAGDC objMESSAGES_RMAG)
        {
            int deleteCount = 0;

            StringBuilder sql = new StringBuilder();
            sql.Append("proc_MESSAGES_RMAGSDelete");

            DBCommandWarpper dbCommandWrapper = new DBCommandWarpper(Connection.dataBase.GetStoredProcCommand(sql.ToString()), Connection);
            
			dbCommandWrapper.AddInParameter("p_MESSAGE_RMAG_ID", DbType.Int32, objMESSAGES_RMAG.MESSAGE_RMAG_ID);

            if (Connection.Transaction != null)
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand, Connection.Transaction);
            else
                deleteCount = Connection.dataBase.ExecuteNonQuery(dbCommandWrapper.DBCommand);

            return deleteCount;
        }
		private MESSAGES_RMAGDC FillObject(IDataReader reader)
        {
			MESSAGES_RMAGDC objMESSAGES_RMAG = null;
            if (reader != null && reader.Read())
            {	
				objMESSAGES_RMAG = new MESSAGES_RMAGDC();
				objMESSAGES_RMAG.MESSAGE_RMAG_ID = (int)reader["MESSAGE_RMAG_ID"];
				objMESSAGES_RMAG.MESSAGE_ID = (int)reader["MESSAGE_ID"];
				objMESSAGES_RMAG.RMAG_ID = (int)reader["RMAG_ID"];
				objMESSAGES_RMAG.CREATED_ON = (DateTime)reader["CREATED_ON"];
				objMESSAGES_RMAG.CREATED_BY = (int)reader["CREATED_BY"];
				objMESSAGES_RMAG.MODIFIED_ON = (DateTime)reader["MODIFIED_ON"];
				objMESSAGES_RMAG.MODIFIED_BY = (int)reader["MODIFIED_BY"];
				objMESSAGES_RMAG.LOCK_COUNTER = reader["LOCK_COUNTER"] == DBNull.Value ? null : (int?)reader["LOCK_COUNTER"];

                reader.Close();
                reader.Dispose();
            }
            return objMESSAGES_RMAG;
        }
		private MESSAGES_RMAGDC FillObject(DataRow row)
        {
			MESSAGES_RMAGDC objMESSAGES_RMAG = null;
			objMESSAGES_RMAG = new MESSAGES_RMAGDC();
			objMESSAGES_RMAG.MESSAGE_RMAG_ID = (int)row["MESSAGE_RMAG_ID"];
			objMESSAGES_RMAG.MESSAGE_ID = (int)row["MESSAGE_ID"];
			objMESSAGES_RMAG.RMAG_ID = (int)row["RMAG_ID"];
			objMESSAGES_RMAG.CREATED_ON = (DateTime)row["CREATED_ON"];
			objMESSAGES_RMAG.CREATED_BY = (int)row["CREATED_BY"];
			objMESSAGES_RMAG.MODIFIED_ON = (DateTime)row["MODIFIED_ON"];
			objMESSAGES_RMAG.MODIFIED_BY = (int)row["MODIFIED_BY"];
			objMESSAGES_RMAG.LOCK_COUNTER = row["LOCK_COUNTER"] == DBNull.Value ? null : (int?)row["LOCK_COUNTER"];

            return objMESSAGES_RMAG;
        }
	}
}
