
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 2:54:15 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using EPay.DataAccess;
using NMART.DataClasses;
using NMART.DataAccess;

namespace NMART.BusinessLayer
{
    public class PERMIT_ATTACHMENTBL
    {
        public bool IsDirty { get; set; }

        public List<PERMIT_ATTACHMENTDC> LoadAll()
        {
            DBConnection objConnection = new DBConnection();
            PERMIT_ATTACHMENTDA objPERMIT_ATTACHMENTDA = new PERMIT_ATTACHMENTDA();
            List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTDC = null;
            try
            {
                objConnection.Open(false);
                objPERMIT_ATTACHMENTDC = objPERMIT_ATTACHMENTDA.LoadAll(objConnection);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return objPERMIT_ATTACHMENTDC;
        }


        public PERMIT_ATTACHMENTDC LoadByPrimaryKey(int PERMIT_ID, int ATTACHMENT_ID)
        {
            DBConnection objConnection = new DBConnection();
            PERMIT_ATTACHMENTDA objPERMIT_ATTACHMENTDA = new PERMIT_ATTACHMENTDA();
            PERMIT_ATTACHMENTDC objPERMIT_ATTACHMENTDC = null;
            try
            {
                objConnection.Open(false);
                objPERMIT_ATTACHMENTDC = objPERMIT_ATTACHMENTDA.LoadByPrimaryKey(objConnection, PERMIT_ID, ATTACHMENT_ID);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return objPERMIT_ATTACHMENTDC;
        }
        public int Update(List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int updatedCount = 0;
            DBConnection objConnection = new DBConnection();
            PERMIT_ATTACHMENTDA objPERMIT_ATTACHMENTDA = new PERMIT_ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                updatedCount = objPERMIT_ATTACHMENTDA.Update(objConnection, objPERMIT_ATTACHMENTs);
                IsDirty = objPERMIT_ATTACHMENTDA.IsDirty;
                if (IsDirty)
                    objConnection.Rollback();
                else
                    objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return updatedCount;
        }

        public int Insert(List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int insertedCount = 0;
            DBConnection objConnection = new DBConnection();
            PERMIT_ATTACHMENTDA objPERMIT_ATTACHMENTDA = new PERMIT_ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                insertedCount = objPERMIT_ATTACHMENTDA.Insert(objConnection, objPERMIT_ATTACHMENTs);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return insertedCount;
        }
        public int Delete(List<PERMIT_ATTACHMENTDC> objPERMIT_ATTACHMENTs)
        {
            int deletedCount = 0;
            DBConnection objConnection = new DBConnection();
            PERMIT_ATTACHMENTDA objPERMIT_ATTACHMENTDA = new PERMIT_ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                deletedCount = objPERMIT_ATTACHMENTDA.Delete(objConnection, objPERMIT_ATTACHMENTs);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return deletedCount;
        }


    }
}

