
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 2:54:14 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using EPay.DataAccess;
using EPay.DataClasses;
using EPay.DataAccess;
using NMART.DataAccess;


namespace EPay.BusinessLayer
{		
	public partial class ATTACHMENTBL
	{
		public bool IsDirty { get; set; }
		
		public List<ATTACHMENTDC>  LoadAll()
		{
			DBConnection objConnection = new DBConnection();
			ATTACHMENTDA objATTACHMENTDA = new ATTACHMENTDA();
			List<ATTACHMENTDC>  objATTACHMENTDC = null;
            try
            {
				objConnection.Open(false);
				objATTACHMENTDC = objATTACHMENTDA.LoadAll(objConnection);
            }
            catch (Exception ex)
            {
                throw ex;
            }   
			finally 
            {
                objConnection.Close();
            }
            return objATTACHMENTDC;
		}
		
		
		public ATTACHMENTDC LoadByPrimaryKey(int ATTACHMENT_ID)
		{
			DBConnection objConnection = new DBConnection();
			ATTACHMENTDA objATTACHMENTDA = new ATTACHMENTDA();
			ATTACHMENTDC objATTACHMENTDC = null;
            try
            {
				objConnection.Open(false);
				objATTACHMENTDC = objATTACHMENTDA.LoadByPrimaryKey(objConnection, ATTACHMENT_ID);                
            }
            catch (Exception ex)
            {
                throw ex;
            }   
			finally 
            {
                objConnection.Close();
            }
            return objATTACHMENTDC;
		}
		public int Update(List<ATTACHMENTDC> objATTACHMENTs)        
        {
            int updatedCount = 0;
            DBConnection objConnection = new DBConnection();
            ATTACHMENTDA objATTACHMENTDA = new ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                updatedCount = objATTACHMENTDA.Update(objConnection, objATTACHMENTs);
                IsDirty = objATTACHMENTDA.IsDirty;
                if (IsDirty)
                    objConnection.Rollback();
                else
                    objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return updatedCount;
        }
		public ATTACHMENTDC Insert(ATTACHMENTDC objATTACHMENT)        
        {
            ATTACHMENTDC addedAttachmentdc;
            DBConnection objConnection = new DBConnection();
            ATTACHMENTDA objATTACHMENTDA = new ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                objATTACHMENT.FILE_SIZE = TransformFileSize(objATTACHMENT.FILE_SIZE);
                addedAttachmentdc = objATTACHMENTDA.Insert(objConnection, objATTACHMENT);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return addedAttachmentdc;
        }
        public int Delete(List<ATTACHMENTDC> objATTACHMENTs)        
        {
            int deletedCount = 0;
            DBConnection objConnection = new DBConnection();
            ATTACHMENTDA objATTACHMENTDA = new ATTACHMENTDA();
            try
            {
                objConnection.Open(true);
                deletedCount = objATTACHMENTDA.Delete(objConnection, objATTACHMENTs);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return deletedCount;
        }
    }
}
