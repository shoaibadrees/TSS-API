
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/20/2015 7:25:12 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using EPay.DataClasses;
using EPay.DataAccess;

namespace EPay.BusinessLayer
{		
	public partial class ROLEBL
	{
		public bool IsDirty { get; set; }
		
		public List<ROLEDC>  LoadAll()
		{
			DBConnection objConnection = new DBConnection();
			ROLEDA objROLEDA = new ROLEDA();
			List<ROLEDC>  objROLEDC = null;
            try
            {
				objConnection.Open(false);
				objROLEDC = objROLEDA.LoadAll(objConnection);
            }
            catch (Exception ex)
            {
                throw ex;
            }   
			finally 
            {
                objConnection.Close();
            }
            return objROLEDC;
		}


        public int Update(List<ROLEDC> objROLEs, bool updatePermissions, ref List<EXCEPTIONDC> lstExceptions)        
        {
            int updatedCount = 0;
            DBConnection objConnection = new DBConnection();
            ROLEDA objROLEDA = new ROLEDA();


            try { 
            foreach (ROLEDC objROLE in objROLEs)
            {
                objConnection.Open(true);
                try {
                        updatedCount = objROLEDA.Update(objConnection,objROLE, updatePermissions);
                        IsDirty = objROLEDA.IsDirty;
                        objConnection.Commit();
                    }
                    catch(Exception exp)
                    {
                        EXCEPTIONDC objExcption = new EXCEPTIONDC();
                        objExcption.FIELD_ID = objROLE.ROLE_ID;
                        objExcption.EXCEPTION_MESSAGE = exp.Message;
                        objExcption.STACK_TRACK = exp.StackTrace;
                        lstExceptions.Add(objExcption);
                        objConnection.Rollback();
                    }
            }

            if (lstExceptions.Count > 0)
                throw new Exception("Excption Occure");

                }
            catch (Exception exp)
            {
                throw exp;
            }
            finally
            {
                objConnection.Close();
            }
           
            return updatedCount;
        }
		public int Insert(List<ROLEDC> objROLEs)        
        {
            int insertedCount = 0;
            DBConnection objConnection = new DBConnection();
            ROLEDA objROLEDA = new ROLEDA();
            try
            {
                objConnection.Open(true);
                foreach (ROLEDC objROLE in objROLEs)
                {
                    insertedCount = objROLEDA.Insert(objConnection, objROLE);
                    if (objROLE.ROLE_ID == -111)
                    {
                        throw new Exception("Role Name '" + objROLE.ROLE_NAME + "' already exists.All other changes saved successfully.");

                    }
                }
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return insertedCount;
        }
		public int Delete(List<ROLEDC> objROLEs)        
        {
            int deletedCount = 0;
            DBConnection objConnection = new DBConnection();
            ROLEDA objROLEDA = new ROLEDA();
            try
            {
                objConnection.Open(true);
                deletedCount = objROLEDA.Delete(objConnection, objROLEs);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return deletedCount;
        }	
		
		
	}
}
