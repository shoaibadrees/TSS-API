
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 3/6/2017 2:32:23 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using EPay.DataClasses;
using EPay.DataAccess;
using EPay.DAL.DataClasses;
using System.Net.Http;
using System.Configuration;
using EPay.Common;
using System.Data;
using OfficeOpenXml;
using System.IO;

namespace EPay.BusinessLayer
{		
	public class DAILYBL
	{
		public bool IsDirty { get; set; }
		
		public List<DAILYDC>  LoadAll(string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate="All")
		{
			DBConnection objConnection = new DBConnection();
			DAILYDA objDAILDA = new DAILYDA();
			List<DAILYDC>  objDAILDC = null;
            try
            {
				objConnection.Open(false);
				objDAILDC = objDAILDA.LoadAll(objConnection, projectIDs,dailyTypeIDs , statusIDs , shiftIDs, dailyDate, dailyEndDate);
            }
            catch (Exception ex)
            {
                throw ex;
            }   
			finally 
            {
                objConnection.Close();
            }
            return objDAILDC;
		}

        public List<DailyHoursReportDC> GetHoursReport(string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate = "All")
        {
            DBConnection objConnection = new DBConnection();
            DAILYDA objDAILDA = new DAILYDA();
            List<DailyHoursReportDC> objDAILDC = null;
            try
            {
                objConnection.Open(false);
                objDAILDC = objDAILDA.GetHoursReport(objConnection, projectIDs, dailyTypeIDs, statusIDs, shiftIDs, dailyDate, dailyEndDate);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return objDAILDC;
        }

        public DataSet DailyHoursReport(string projectIDs = "All", string dailyTypeIDs = "All", string statusIDs = "All", string shiftIDs = "All", string dailyDate = "All", string dailyEndDate = "All")
        {
            DBConnection objConnection = new DBConnection();
            DAILYDA objDAILDA = new DAILYDA();
            DataSet ds = null;
            try
            {
                objConnection.Open(false);
                ds = objDAILDA.DailyHoursReport(objConnection, projectIDs, dailyTypeIDs, statusIDs, shiftIDs, dailyDate, dailyEndDate);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return ds;
        }

        public DAILYDC LoadByPrimaryKey(int DAILY_ID)
		{
			DBConnection objConnection = new DBConnection();
			DAILYDA objDAILDA = new DAILYDA();
			DAILYDC objDAILDC = null;
            try
            {
				objConnection.Open(false);
				objDAILDC = objDAILDA.LoadByPrimaryKey(objConnection, DAILY_ID);                
            }
            catch (Exception ex)
            {
                throw ex;
            }   
			finally 
            {
                objConnection.Close();
            }
            return objDAILDC;
		}

        

        public DailyDTO Update(DailyDTO dailyDTO)        
        {
            DAILYDC objDAILYDC = dailyDTO.DAILYDC;
            int updatedCount = 0;
            DBConnection objConnection = new DBConnection();
            DAILYDA objDAILDA = new DAILYDA();
            bool exceptionFound = true;
            try
            {
                objConnection.Open(true);
                DateTime currentDateTime = DateTime.Now;
                objDAILYDC.MODIFIED_ON = currentDateTime;
                updatedCount = objDAILDA.Update(objConnection, objDAILYDC);
                if (updatedCount > 0) {
                    exceptionFound = false;
                    #region Unknown Daily - Insert/Update
                    try
                    {
                        if (objDAILYDC.PROJECT_ID == -1 || objDAILYDC.JOB_ID == -1)
                        {
                            DAILY_UNKNOWNDA unknownDailyDA = new DAILY_UNKNOWNDA();
                            DAILY_UNKNOWNDC DAILY_UNKNOWNDC = unknownDailyDA.LoadByDailyID(objConnection, objDAILYDC.DAILY_ID);
                            if (DAILY_UNKNOWNDC != null && DAILY_UNKNOWNDC.DU_DAILY_ID != 0)
                            {
                                objDAILYDC.DU_DAILY_ID = DAILY_UNKNOWNDC.DU_DAILY_ID;
                                objDAILYDC.LOCK_COUNTER = DAILY_UNKNOWNDC.LOCK_COUNTER; // Retain previous lock counter
                                unknownDailyDA.Update(objConnection, objDAILYDC);
                            }
                            else
                            {
                                objDAILYDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                                objDAILYDC.CREATED_ON = currentDateTime;
                                objDAILYDC.MODIFIED_ON = objDAILYDC.CREATED_ON;
                                unknownDailyDA.Insert(objConnection, objDAILYDC);
                            }
                        }
                    }
                    catch (Exception unkDailyException)
                    {
                        exceptionFound = true;
                        dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "EXCEPTION";
                        if (unkDailyException.Message.Contains("CONCURRENCY_ERROR"))
                        {
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                        }
                        else
                        {
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Message = unkDailyException.Message;
                            dailyDTO.DAILYDC.POST_MESSAGEDC.StackTrace = unkDailyException.StackTrace;
                        }

                    }
                    #endregion

                    #region ManPower - Insert/Update
                    MAN_POWERBL manPowerBL = new MAN_POWERBL();
                    foreach (MAN_POWERDC mpDC in dailyDTO.listMAN_POWERDC) {
                        try
                        {
                            mpDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            if (mpDC.MAN_POWER_ID == 0)
                            {
                                mpDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                                mpDC.MODIFIED_ON = mpDC.CREATED_ON;
                                mpDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                                mpDC.MODIFIED_BY = mpDC.CREATED_BY;
                                manPowerBL.Insert(objConnection, mpDC);
                            }
                            else
                            {
                                mpDC.MODIFIED_ON = objDAILYDC.MODIFIED_ON;
                                mpDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                manPowerBL.Update(objConnection, mpDC);
                            }
                        }
                        catch (Exception mpException)
                        {
                            exceptionFound = true;
                            mpDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (mpException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                mpDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                mpDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                mpDC.POST_MESSAGEDC.Message = mpException.Message;
                                mpDC.POST_MESSAGEDC.StackTrace = mpException.StackTrace;
                            }
                        }
                    }
                    #endregion

                    #region Vehicle - Insert/Update
                    VEHICLEBL vehicleBL = new VEHICLEBL();
                    foreach (VEHICLEDC vehicleDC in dailyDTO.listVEHICLEDC)
                    {
                        try
                        {
                            vehicleDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            if (vehicleDC.VEHICLE_VALUE_ID == 0)
                            {
                                vehicleDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                                vehicleDC.MODIFIED_ON = vehicleDC.CREATED_ON;
                                vehicleDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                                vehicleDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                vehicleBL.Insert(objConnection, vehicleDC);
                            }
                            else
                            {
                                vehicleDC.MODIFIED_ON = objDAILYDC.MODIFIED_ON;
                                vehicleDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                vehicleBL.Update(objConnection, vehicleDC);
                            }
                        }
                        catch (Exception vvException)
                        {
                            exceptionFound = true;
                            vehicleDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (vvException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                vehicleDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                vehicleDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                vehicleDC.POST_MESSAGEDC.Message = vvException.Message;
                                vehicleDC.POST_MESSAGEDC.StackTrace = vvException.StackTrace;
                            }
                        }
                    }
                    #endregion

                    #region Labor - Insert/Update
                    LABORBL laborBL = new LABORBL();
                    foreach (LABORDC laborDC in dailyDTO.listLABORDC)
                    {
                        try
                        {
                            laborDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            if (laborDC.LABOR_VALUE_ID == 0)
                            {
                                laborDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                                laborDC.MODIFIED_ON = laborDC.CREATED_ON;
                                laborDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                                laborDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                laborBL.Insert(objConnection, laborDC);
                            }
                            else
                            {
                                laborDC.MODIFIED_ON = objDAILYDC.MODIFIED_ON;
                                laborDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                laborBL.Update(objConnection, laborDC);
                            }
                        }
                        catch (Exception lbrException)
                        {
                            exceptionFound = true;
                            laborDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (lbrException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                laborDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                laborDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                laborDC.POST_MESSAGEDC.Message = lbrException.Message;
                                laborDC.POST_MESSAGEDC.StackTrace = lbrException.StackTrace;
                            }
                        }
                    }
                    #endregion

                    #region Material - Insert/Update
                    InsertUpdateMaterials(objConnection, objDAILYDC, dailyDTO.listMATERIALDC, ref exceptionFound);
                    #endregion

                    #region Labor Item - Insert/Update
                    InsertUpdateMaterials(objConnection, objDAILYDC, dailyDTO.listLaborItemDC, ref exceptionFound);
                    #endregion

                    #region Aerial - Insert/Update
                    InsertUpdateMaterials(objConnection, objDAILYDC, dailyDTO.listAerialDC, ref exceptionFound);
                    #endregion

                    #region MDU - Insert/Update
                    InsertUpdateMaterials(objConnection, objDAILYDC, dailyDTO.listMDUDC, ref exceptionFound);
                    #endregion

                    #region Work Detail - Insert/Update
                    WORK_DETAILBL workDetailBL = new WORK_DETAILBL();
                    foreach (WORK_DETAILDC workDetailDC in dailyDTO.listWORK_DETAILDC)
                    {
                        try
                        {
                            workDetailDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            if (workDetailDC.WORK_DETAIL_VALUE_ID == 0)
                            {
                                workDetailDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                                workDetailDC.MODIFIED_ON = workDetailDC.CREATED_ON;
                                workDetailDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                                workDetailDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                workDetailBL.Insert(objConnection, workDetailDC);
                            }
                            else
                            {
                                workDetailDC.MODIFIED_ON = objDAILYDC.MODIFIED_ON;
                                workDetailDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                                workDetailBL.Update(objConnection, workDetailDC);
                            }
                        }
                        catch (Exception wvException)
                        {
                            exceptionFound = true;
                            workDetailDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (wvException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                workDetailDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                workDetailDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                workDetailDC.POST_MESSAGEDC.Message = wvException.Message;
                                workDetailDC.POST_MESSAGEDC.StackTrace = wvException.StackTrace;
                            }
                        }
                    }
                    #endregion
                }
            }
            catch (Exception exception)
            {
                exceptionFound = true;
                dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "EXCEPTION";
                if (exception.Message.Contains("CONCURRENCY_ERROR"))
                {
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                }
                else
                {
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Message = exception.Message;
                    dailyDTO.DAILYDC.POST_MESSAGEDC.StackTrace = exception.StackTrace;
                }
            }
            finally
            {
                if (exceptionFound)
                {
                    dailyDTO.DAILYDC.TRANSACTION_SUCCESS = false;
                    objConnection.Rollback();
                }
                else
                {
                    dailyDTO.DAILYDC.TRANSACTION_SUCCESS = true;
                    objConnection.Commit();
                }

                objConnection.Close();
            }
            return dailyDTO;
        }
        private void InsertMaterials(DBConnection objConnection, DAILYDC objDAILYDC, List<MATERIALDC> listMATERIALDC, ref bool exceptionFound) {
            MATERIALBL materialBL = new MATERIALBL();
            foreach (MATERIALDC materialDC in listMATERIALDC)
            {
                try
                {
                    materialDC.DAILY_ID = objDAILYDC.DAILY_ID;
                    materialDC.LOCK_COUNTER = 0;
                    materialDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                    materialDC.MODIFIED_ON = materialDC.CREATED_ON;
                    materialDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                    materialDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                    materialBL.Insert(objConnection, materialDC);
                }
                catch (Exception mvException)
                {
                    exceptionFound = true;
                    materialDC.POST_MESSAGEDC.Type = "EXCEPTION";
                    if (mvException.Message.Contains("CONCURRENCY_ERROR"))
                    {
                        materialDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                        materialDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                    }
                    else
                    {
                        materialDC.POST_MESSAGEDC.Message = mvException.Message;
                        materialDC.POST_MESSAGEDC.StackTrace = mvException.StackTrace;
                    }
                }
            }
        }

        public MemoryStream GetStreamForHoursReport(DataSet ds)
        {
            ExcelPackage pck = new ExcelPackage();
            var sheet1 = pck.Workbook.Worksheets.Add("Daily Hours");

            sheet1.Cells["A1:L1"].Merge = true;
            sheet1.Cells["A1:L1"].Value = "JOB-DAILY DETAILED HOUR REPORT";
            sheet1.Cells["A1:L1"].Style.Font.Bold = true;
            //var shape = sheet1.Drawings.AddShape("Shape1", eShapeStyle.Rect);
            //shape.SetPosition(50, 200);
            //shape.SetSize(200, 100);
            //shape.Text = "Sample 1 saves to the Response.OutputStream";
            MemoryStream stream = new MemoryStream();
            pck.SaveAs(stream);
            return stream;          
        }

        private void InsertUpdateMaterials(DBConnection objConnection, DAILYDC objDAILYDC, List<MATERIALDC> listMATERIALDC, ref bool exceptionFound)
        {
            MATERIALBL materialBL = new MATERIALBL();
            foreach (MATERIALDC materialDC in listMATERIALDC)
            {
                try
                {
                    materialDC.DAILY_ID = objDAILYDC.DAILY_ID;
                    if (materialDC.MATERIAL_VALUE_ID == 0)
                    {
                        materialDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                        materialDC.MODIFIED_ON = materialDC.CREATED_ON;
                        materialDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                        materialDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                        materialBL.Insert(objConnection, materialDC);
                    }
                    else
                    {
                        materialDC.MODIFIED_ON = objDAILYDC.MODIFIED_ON;
                        materialDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                        materialBL.Update(objConnection, materialDC);
                    }
                }
                catch (Exception mvException)
                {
                    exceptionFound = true;
                    materialDC.POST_MESSAGEDC.Type = "EXCEPTION";
                    if (mvException.Message.Contains("CONCURRENCY_ERROR"))
                    {
                        materialDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                        materialDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                    }
                    else
                    {
                        materialDC.POST_MESSAGEDC.Message = mvException.Message;
                        materialDC.POST_MESSAGEDC.StackTrace = mvException.StackTrace;
                    }
                }
            }
        }
        public DailyDTO Insert(DailyDTO dailyDTO)        
        {
            DAILYDC objDAILYDC = dailyDTO.DAILYDC;
            int p_DAILY_ID = 0;
            DBConnection objConnection = new DBConnection();
            DAILYDA objDAILDA = new DAILYDA();
            bool exceptionFound = true;
            try
            {
                objConnection.Open(true);
                DateTime currentDateTime = DateTime.Now;
                objDAILYDC.CREATED_ON = currentDateTime;
                objDAILYDC.MODIFIED_ON = objDAILYDC.CREATED_ON;
                objDAILYDC.LOCK_COUNTER = 0;
                p_DAILY_ID = objDAILDA.Insert(objConnection, objDAILYDC);
                
                if (p_DAILY_ID != 0)
                {
                    objDAILYDC.DAILY_ID = p_DAILY_ID;
                    exceptionFound = false;
                    #region Unknown Daily - Insert
                    try
                    {
                        if (objDAILYDC.PROJECT_ID == null || objDAILYDC.JOB_ID == null || objDAILYDC.PROJECT_ID == -1 || objDAILYDC.PROJECT_ID == -1)
                        {
                            DAILY_UNKNOWNDA unknownDailyDA = new DAILY_UNKNOWNDA();
                            objDAILYDC.DAILY_ID = p_DAILY_ID;
                            objDAILYDC.LOCK_COUNTER = 0;
                            unknownDailyDA.Insert(objConnection, objDAILYDC);
                        }
                    }
                    catch (Exception unkDailyException)
                    {
                        exceptionFound = true;
                        dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "EXCEPTION";
                        if (unkDailyException.Message.Contains("CONCURRENCY_ERROR"))
                        {
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                        }
                        else
                        {
                            dailyDTO.DAILYDC.POST_MESSAGEDC.Message = unkDailyException.Message;
                            dailyDTO.DAILYDC.POST_MESSAGEDC.StackTrace = unkDailyException.StackTrace;
                        }

                    }
                    #endregion

                    #region ManPower - Insert
                    MAN_POWERBL manPowerBL = new MAN_POWERBL();
                    foreach (MAN_POWERDC mpDC in dailyDTO.listMAN_POWERDC)
                    {
                        try { 
                            mpDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            mpDC.LOCK_COUNTER = 0;

                            mpDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                            mpDC.MODIFIED_ON = mpDC.CREATED_ON;
                            mpDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                            mpDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                            manPowerBL.Insert(objConnection, mpDC);
                        }
                        catch (Exception mpException)
                        {
                            exceptionFound = true;
                            mpDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (mpException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                mpDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                mpDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                mpDC.POST_MESSAGEDC.Message = mpException.Message;
                                mpDC.POST_MESSAGEDC.StackTrace = mpException.StackTrace;
                            }
                        }
                    }
                    #endregion

                    #region Vehicles - Insert
                    VEHICLEBL vehicleBL = new VEHICLEBL();
                    foreach (VEHICLEDC vehicleDC in dailyDTO.listVEHICLEDC)
                    {
                        try { 
                            vehicleDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            vehicleDC.LOCK_COUNTER = 0;
                            vehicleDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                            vehicleDC.MODIFIED_ON = vehicleDC.CREATED_ON;
                            vehicleDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                            vehicleDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                            vehicleBL.Insert(objConnection, vehicleDC);
                        }
                        catch (Exception vvException)
                        {
                            exceptionFound = true;
                            vehicleDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (vvException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                vehicleDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                vehicleDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                vehicleDC.POST_MESSAGEDC.Message = vvException.Message;
                                vehicleDC.POST_MESSAGEDC.StackTrace = vvException.StackTrace;
                            }
                        }
                    }
                    #endregion

                    #region Labor - Insert
                    LABORBL laborBL = new LABORBL();
                    foreach (LABORDC laborDC in dailyDTO.listLABORDC)
                    {
                        try
                        {
                            laborDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            laborDC.LOCK_COUNTER = 0;
                            laborDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                            laborDC.MODIFIED_ON = laborDC.CREATED_ON;
                            laborDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                            laborDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                            laborBL.Insert(objConnection, laborDC);
                        }
                        catch (Exception lbrException)
                        {
                            exceptionFound = true;
                            laborDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (lbrException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                laborDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                laborDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                laborDC.POST_MESSAGEDC.Message = lbrException.Message;
                                laborDC.POST_MESSAGEDC.StackTrace = lbrException.StackTrace;
                            }
                        }

                    }
                    #endregion

                    #region Material - Insert
                    InsertMaterials(objConnection, objDAILYDC, dailyDTO.listMATERIALDC, ref exceptionFound);
                    #endregion

                    #region Labor Item - Insert
                    InsertMaterials(objConnection, objDAILYDC, dailyDTO.listLaborItemDC, ref exceptionFound);
                    #endregion

                    #region Aerial - Insert
                    InsertMaterials(objConnection, objDAILYDC, dailyDTO.listAerialDC, ref exceptionFound);
                    #endregion

                    #region MDU - Insert
                    InsertMaterials(objConnection, objDAILYDC, dailyDTO.listMDUDC, ref exceptionFound);
                    #endregion

                    #region Work Detail - Insert
                    WORK_DETAILBL workDetailBL = new WORK_DETAILBL();
                    foreach (WORK_DETAILDC workDetailDC in dailyDTO.listWORK_DETAILDC)
                    {
                        try
                        {
                            workDetailDC.DAILY_ID = objDAILYDC.DAILY_ID;
                            workDetailDC.LOCK_COUNTER = 0;
                            workDetailDC.CREATED_ON = objDAILYDC.MODIFIED_ON;
                            workDetailDC.MODIFIED_ON = workDetailDC.CREATED_ON;
                            workDetailDC.CREATED_BY = objDAILYDC.MODIFIED_BY;
                            workDetailDC.MODIFIED_BY = objDAILYDC.MODIFIED_BY;
                            workDetailBL.Insert(objConnection, workDetailDC);
                        }
                        catch (Exception wvException)
                        {
                            exceptionFound = true;
                            workDetailDC.POST_MESSAGEDC.Type = "EXCEPTION";
                            if (wvException.Message.Contains("CONCURRENCY_ERROR"))
                            {
                                workDetailDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                                workDetailDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                            }
                            else
                            {
                                workDetailDC.POST_MESSAGEDC.Message = wvException.Message;
                                workDetailDC.POST_MESSAGEDC.StackTrace = wvException.StackTrace;
                            }
                        }
                    }
                    #endregion


                }
            }
            catch (Exception exception)
            {
                exceptionFound = true;
                dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "EXCEPTION";
                if (exception.Message.Contains("CONCURRENCY_ERROR"))
                {
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Type = "CONCURRENCY_ERROR";
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Message = "CONCURRENCY_ERROR";
                }
                else
                {
                    dailyDTO.DAILYDC.POST_MESSAGEDC.Message = exception.Message;
                    dailyDTO.DAILYDC.POST_MESSAGEDC.StackTrace = exception.StackTrace;
                }
            }
            finally
            {
                if (exceptionFound)
                {
                    dailyDTO.DAILYDC.TRANSACTION_SUCCESS = false;
                    objConnection.Rollback();
                }
                else
                {
                    dailyDTO.DAILYDC.TRANSACTION_SUCCESS = true;
                    dailyDTO.DAILYDC.DAILY_ID = p_DAILY_ID;
                    objConnection.Commit();
                }
                objConnection.Close();
            }
            return dailyDTO;
        }
		public int Delete(List<DAILYDC> objDAILs, ref List<EXCEPTIONDC> lstExceptions)        
        {
            int deletedCount = 0;
            DBConnection objConnection = new DBConnection();
            DAILYDA objDAILDA = new DAILYDA();
            try
            {
                //objConnection.Open(true);
                deletedCount = objDAILDA.Delete(objConnection,ref lstExceptions, objDAILs);
                
                //objConnection.Commit();
            }
            catch (Exception ex)
            {
                //objConnection.Rollback();
                throw ex;
            }
            //finally
            //{
            //    objConnection.Close();
            //}
            return deletedCount;
        }

        public void SendDailyEmail(HttpRequestMessage request, DAILYDC dailyDC,bool isNewDaily)
        {
            int sentStatus = 0;
            MESSAGEBL objMessageBL = new MESSAGEBL();
            try
            {

                MESSAGEDC objMessage = new MESSAGEDC();
                objMessage.FROM = ConfigurationManager.AppSettings["AdminEmail"];
                objMessage.RECIPIENTS = new EMAIL_GROUPSBL().GetEmailsAgainstClient(dailyDC.CLIENT_PM);
                if (String.IsNullOrEmpty(objMessage.FROM))
                {
                    throw new Exception("Daily email cann't be sent.</br>Daily's Admin email address is not configured. Please contact your administrator.");
                }
                if (String.IsNullOrEmpty(objMessage.RECIPIENTS))
                {
                    throw new Exception("Daily email cann't be sent.</br>Daily's To email address is not configured. Please contact your administrator.");
                }

                if (String.IsNullOrEmpty(ConfigurationManager.AppSettings["SMTPAddress"]))
                {
                    throw new Exception("Your password cannot be reset.</br>SMTP address is not configured.");
                }
                string subjectPrefix = isNewDaily ? "New" : "Update";
                dailyDC.HYLAN_PROJECT_ID = dailyDC.HYLAN_PROJECT_ID == null ? "Unknown" : dailyDC.HYLAN_PROJECT_ID;
                dailyDC.JOB_FILE_NUMBER = dailyDC.JOB_FILE_NUMBER == null ? "Unknown" : dailyDC.JOB_FILE_NUMBER;
                objMessage.SUBJECT = subjectPrefix+ " Daily Submitted " + dailyDC.HYLAN_PROJECT_ID + "_" + dailyDC.JOB_FILE_NUMBER;

               
                string msgBody = "<!DOCTYPE HTML><html><body><table cellspacing='0' cellpadding='0'>";
                string col1Style = " style='font-weight: bold;background-color: #f2f2f2;padding-left:10px;padding-right:10px;' ";
                string col2Style = " style='padding-left: 10px;' ";
                string rowStyle = " style='height:25px;' ";
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + " >Submitted by: </td><td " + col2Style + " > " + dailyDC.MODIFIED_BY_NAME + "<td></tr>";  //new to change need to display the name
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + ">Date/Time: </td><td " + col2Style + " > " + dailyDC.MODIFIED_ON.ToString("MM/dd/yyyy HH:mm") + "<td></tr>";
                //msgBody += "<tr><td colspan = 2 >" + dailyDC.DAILY_TYPE_NAME + "<td></tr>";
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + ">Daily Type: </td><td " + col2Style + " > " + dailyDC.DAILY_TYPE_NAME + "<td></tr>";
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + ">Day: </td><td " + col2Style + " > " + dailyDC.DAILY_DAYS + "<td></tr>";
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + ">Status: </td><td " + col2Style + " > " + dailyDC.DAILY_STATUS_NAME + "<td></tr>";
                msgBody += "<tr " + rowStyle + " ><td " + col1Style + ">Work Date: </td><td " + col2Style + " > " + dailyDC.DAILY_DATE.ToString("MM/dd/yyyy") + "<td></tr>";

                msgBody += "</table></body></html>";
                objMessage.CONTENTS = msgBody;
                sentStatus = objMessageBL.SendSMTPEmail(objMessage);
                if (sentStatus != 1)
                {
                    throw new Exception("Daily email cann't be sent.due to some error. Please contact your administrator.");
                }

            }
            catch (Exception exp)
            {
                int userID = Common.Utility.GetUserID(request);
                Util.Utility.InsertIntoErrorLog(exp.Message, exp.StackTrace, userID);
            }


        }

    }
}
