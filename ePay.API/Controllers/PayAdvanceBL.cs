
// Auto Generated by Tool Version # (1.3.0.3)
// Macrosoft Inc on: 2/23/2017 2:54:14 PM
// Last Updated on: 

using System;
using System.Collections.Generic;
using EPay.DataAccess;
using EPay.DataClasses;
using EPay.DataAccess;
using NMART.DataAccess;


namespace EPay.BusinessLayer
{
    public class PayAdvanceBL
    {
        public bool IsDirty { get; set; }

        public List<PayAdvanceDC> LoadAllEmployee()
        {
            DBConnection objConnection = new DBConnection();

            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            List<PayAdvanceDC> objPayAdvanceDC = null;
            try
            {
                objConnection.Open(false);
                objPayAdvanceDC = objPayAdvanceDA.LoadAllEmployee(objConnection);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();

            }
            return objPayAdvanceDC;
        }
        public List<PayAdvanceDC> LoadAll()
        {
            DBConnection objConnection = new DBConnection();

            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            List<PayAdvanceDC> objPayAdvanceDC = null;
            try
            {
                objConnection.Open(false);
                objPayAdvanceDC = objPayAdvanceDA.LoadAll(objConnection);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return objPayAdvanceDC;
        }


        public PayAdvanceDC LoadByPrimaryKey(string ID)
        {
            DBConnection objConnection = new DBConnection();
            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            PayAdvanceDC objPayAdvanceDC = null;
            try
            {
                objConnection.Open(false);
                objPayAdvanceDC = objPayAdvanceDA.LoadByPrimaryKey(objConnection, ID);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return objPayAdvanceDC;
        }
        public int Update(List<PayAdvanceDC> objPayDesignations)
        {
            int updatedCount = 0;
            DBConnection objConnection = new DBConnection();
            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            try
            {
                objConnection.Open(true);
                updatedCount = objPayAdvanceDA.Update(objConnection, objPayDesignations);
                IsDirty = objPayAdvanceDA.IsDirty;
                if (IsDirty)
                    objConnection.Rollback();
                else
                    objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return updatedCount;
        }
        public int Insert(List<PayAdvanceDC> objPayDesignations)
        {
            int insertedCount = 0;
            DBConnection objConnection = new DBConnection();
            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            try
            {
                objConnection.Open(true);
                insertedCount = objPayAdvanceDA.Insert(objConnection, objPayDesignations);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return insertedCount;
        }
        public int Delete(List<PayAdvanceDC> objPayDesignations)
        {
            int deletedCount = 0;
            DBConnection objConnection = new DBConnection();
            PayAdvanceDA objPayAdvanceDA = new PayAdvanceDA();
            try
            {
                objConnection.Open(true);
                deletedCount = objPayAdvanceDA.Delete(objConnection, objPayDesignations);
                objConnection.Commit();
            }
            catch (Exception ex)
            {
                objConnection.Rollback();
                throw ex;
            }
            finally
            {
                objConnection.Close();
            }
            return deletedCount;
        }


    }
}
