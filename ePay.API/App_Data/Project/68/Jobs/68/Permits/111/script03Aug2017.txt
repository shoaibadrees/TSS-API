------8/3/2017
INSERT INTO [dbo].[ROLES_PERMISSIONS]
           ([ROLE_ID]
           ,[SCREEN_ID]
           ,[PERMISSION_TYPE_ID]
           ,[PERMISSION_TYPE]
           ,[PERMISSION_TITLE]
           ,[GENERAL_EDIT_ACCESS_TYPE]
           ,[VIEW_ACCESS_GENERAL]
           ,[EDIT_ACCESS])
     VALUES
           (17
           ,(Select Screen_id from Screens where screen_name = 'Manage Dailies')
           ,'1'
           ,'SPECIAL_FUNCTION'
           ,'Delete Daily'
           ,null
           ,1
           ,0)
Go
-------------

ALTER PROCEDURE [dbo].[proc_PERMITSLoadDashboard]
@p_projectIDs varchar(max) = 'All',
@p_permitStatusIDs varchar(max) = 'All',
@p_clientIDs varchar(max) = 'All',
@p_jobIDs varchar(max) = 'All',
@p_submitedStartDt varchar(20) = 'All',
@p_submitedEndDt varchar(20) = 'All'

AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	Declare @p_submitedStartDt1 as date = null
	Declare @p_submitedEndDt1 as date = null

	if(@p_submitedStartDt != 'All') set @p_submitedStartDt1 = cast(@p_submitedStartDt as date)
	if(@p_submitedEndDt != 'All') set @p_submitedEndDt1 = cast(@p_submitedEndDt as date)

		SELECT [PERMIT_ID]
		  ,ISNULL(Jobs.[PROJECT_ID] ,-1) [PROJECT_ID]
		  ,ISNULL(PROJECTS.HYLAN_PROJECT_ID, 'Unknown') HYLAN_PROJECT_ID
		  ,ISNULL(PERMITS.JOB_ID, -1) JOB_ID
		  ,ISNULL(cast(JOBS.[JOB_FILE_NUMBER] as varchar) ,'Unknown')  [JOB_FILE_NUMBER] 
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[CLIENT] ELSE COMPANIES.COMPANY_NAME END AS CLIENT
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[POLE_LOCATION]	   ELSE JOBS.[POLE_LOCATION]	END  [POLE_LOCATION]	
		  ,[PERMITS].[DOT_TRACKING_NUMBER]
		  ,[PERMITS].PERMIT_NUMBER_TEXT PERMIT_NUMBER_TEXT
		  ,[PERMITS].[SEGMENT]
		  ,[PERMITS].[SUBMITTED_DATE]
		  ,[PERMITS].[ISSUED_DATE]
		  ,[PERMITS].[VALID_DATE]
		  ,[PERMITS].[EXPIRES_DATE]
		  ,[PERMITS].[REJECTED_DATE]
		  ,case When IsNull([PERMITS].[STIPULATION_DAY],0) = 0 then 'No' ELSE 'Yes' End STIPULATION_DAY1
		  ,case When IsNull([PERMITS].[STIPULATION_NIGHT],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_NIGHT1]
		  ,case When IsNull([PERMITS].[STIPULATION_WEEKEND],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_WEEKEND1]
		  ,case When IsNull([PERMITS].[IS_PROTECTED_STREET],'N') = 'N' then 'No' ELSE 'Yes' End [IS_PROTECTED_STREET1]
		  ,[PERMITS].[STIPULATIONS_OTHER]


			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Pending' Then 'Yes' Else 'No' END PENDING_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Active' or dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Expiring 5 Days' Then 'Yes' Else 'No' END ACTIVE_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Expired' Then 'Yes' Else 'No' END EXPIRED_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Expiring 5 Days' Then 'Yes' Else 'No' END EXPIRING_5DAYS_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'On-Hold' Then 'Yes' Else 'No' END ON_HOLD_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Request Extension' Then 'Yes' Else 'No' END REQUEST_EXTENSION_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Pending' Then 'Yes' Else 'No' END  IS_REQUEST_RENEWAL_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Request Renewal' Then 'Yes' Else 'No' END  PENDING_STATUS
			,CASE WHEN dbo.fGetPermitStatusName(PERMITS.PERMIT_ID) = 'Rejected' Then 'Yes' Else 'No' END REJECTED_STATUS

		
	  FROM [dbo].[PERMITS]
	  LEFT JOIN [LOOK_UPS] Lu_PermitStatus ON ([PERMITS].[PERMIT_STATUS] = Lu_PermitStatus.[LOOK_UP_ID])
	  LEFT JOIN PERMIT_TYPES PermitNames on (PermitNames.PERMIT_TYPE_ID = [PERMITS].[PERMIT_TYPE])
	  LEFT JOIN LOOK_UPS Lu_PermitCategories ON (PermitNames.PERMIT_CATEGORY = Lu_PermitCategories.[LOOK_UP_ID])
	  LEFT JOIN JOBS ON (JOBS.JOB_ID = PERMITS.JOB_ID)
	  LEFT JOIN PROJECTS ON (PROJECTS.PROJECT_ID = Jobs.PROJECT_ID)
	  LEFT JOIN COMPANIES ON (COMPANIES.COMPANY_ID = PROJECTS.CLIENT)
	  LEFT JOIN [LOOK_UPS] Lu_RejectedReasons ON ([PERMITS].REJECTED_REASON = Lu_RejectedReasons.[LOOK_UP_ID])
	  LEFT JOIN vPermitsSummary ON (vPermitsSummary.PROJECT_ID = [PERMITS].PROJECT_ID AND vPermitsSummary.JOB_ID =[PERMITS].JOB_ID )

	  WHERE
	  	    (isNull(@p_projectIDs,'All') = 'All' or CAST(isNull( Jobs.[PROJECT_ID],-1) AS VARCHAR) in (Select item from dbo.split(@p_projectIDs,',') ) )
		AND (isNull(@p_permitStatusIDs,'All') = 'All' or CAST( [PERMITS].PERMIT_STATUS AS VARCHAR) in (Select item from dbo.split(@p_permitStatusIDs,',') ) )
		AND (isNull(@p_clientIDs,'All') = 'All' or CAST( [PROJECTS].CLIENT AS VARCHAR) in (Select item from dbo.split(@p_clientIDs,',') ) )
		AND (isNull(@p_jobIDs,'All') = 'All' or CAST( [PERMITS].JOB_ID AS VARCHAR) in (Select item from dbo.split(@p_jobIDs,',') ) )	
		AND( 
		        (@p_submitedStartDt = 'All'  or [PERMITS].SUBMITTED_DATE >=  @p_submitedStartDt1 )
				and 
				(@p_submitedEndDt = 'All'  or [PERMITS].SUBMITTED_DATE <=  @p_submitedEndDt1 )		
		)

	SET @Err = @@Error

	RETURN @Err
END
go
--------------

ALTER PROCEDURE [dbo].[proc_PERMITSLoadAll]
@p_projectIDs varchar(max) = 'All'
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

		SELECT [PERMIT_ID]
		  ,ISNULL(Jobs.[PROJECT_ID] ,-1) [PROJECT_ID]
		  ,ISNULL(PROJECTS.HYLAN_PROJECT_ID, 'Unknown') HYLAN_PROJECT_ID
		  ,ISNULL(PERMITS.JOB_ID, -1) JOB_ID
		  ,ISNULL(cast(JOBS.[JOB_FILE_NUMBER] as varchar) ,'Unknown')  [JOB_FILE_NUMBER] 
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[CLIENT] ELSE COMPANIES.COMPANY_NAME END AS CLIENT
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID1]		   ELSE JOBS.[NODE_ID1]         END  [NODE_ID1]
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID2]		   ELSE JOBS.[NODE_ID2]			END  [NODE_ID2]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID3]		   ELSE JOBS.[NODE_ID3]			END  [NODE_ID3]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[HUB]			   ELSE JOBS.[HUB]				END  [HUB]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN   PERMITS.HYLAN_PM ELSE JOBS.Hylan_PM END  [HYLAN_PM]
		  ,Cast(CASE WHEN HYLAN_PROJECT_ID IS NULL THEN   dbo.fGetUserName(PERMITS.HYLAN_PM)  ELSE dbo.fGetUserName(JOBS.Hylan_PM) END as varchar(100)) [HYLAN_PM_NAME]
		  
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[STREET_ADDRESS]  ELSE JOBS.[STREET_ADDRESS]	END  [STREET_ADDRESS]	
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[CITY]			   ELSE JOBS.[CITY]				END  [CITY]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[STATE]		   ELSE JOBS.[STATE]			END  [STATE]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[ZIP]			   ELSE JOBS.[ZIP]				END  [ZIP]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[LAT]			   ELSE JOBS.[LAT]				END  [LAT]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[LONG]			   ELSE JOBS.[LONG]				END  [LONG]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[POLE_LOCATION]	   ELSE JOBS.[POLE_LOCATION]	END  [POLE_LOCATION]	
		  ,[PERMITS].PERMIT_NUMBER_TEXT PERMIT_NUMBER_TEXT
		  ,[PERMITS].[PERMIT_TYPE]
		  ,PermitNames.[DESCRIPTION] PERMIT_DESCRIPTION		  
		  ,Lu_PermitCategories.[LOOK_UP_ID] AS PERMIT_CATEGORY
		  ,Lu_PermitCategories.[LU_NAME] AS PERMIT_CATEGORY_NAME
		  ,[PERMITS].[DOT_TRACKING_NUMBER]
		  ,[PERMITS].[SEGMENT]
		  --,CASE WHEN [PERMITS].[IS_PROTECTED_STREET] = 'Y' THEN 'Yes' WHEN [PERMITS].[IS_PROTECTED_STREET] = 'N' THEN 'No' ELSE ISNULL([PERMITS].[IS_PROTECTED_STREET],'') END [IS_PROTECTED_STREET]
		  ,isNull( [PERMITS].[IS_PROTECTED_STREET] , 'N' ) [IS_PROTECTED_STREET]
		  ,[PERMITS].[MARKOUT_START_DATE]
		  ,[PERMITS].[MARKOUT_END_DATE]
		  ,[PERMITS].[ISSUED_DATE]
		  ,[PERMITS].[VALID_DATE]
		  ,[PERMITS].[EXPIRES_DATE]
		  ,CASE WHEN EXPIRES_DATE IS NOT NULL AND Lu_PermitStatus.[LU_NAME] = 'Active'
				THEN CASE 
						WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<0 THEN (SELECT TOP 1 LOOK_UP_ID FROM LOOK_UPS WHERE LU_TYPE = 'PERMIT_STATUS' AND LU_NAME = 'Active' )
					    ELSE [PERMITS].[PERMIT_STATUS]
					 END
			   ELSE  
					[PERMITS].[PERMIT_STATUS]
		   END AS [PERMIT_STATUS]
		  ,CASE WHEN EXPIRES_DATE IS NOT NULL AND Lu_PermitStatus.[LU_NAME] = 'Active'
				THEN CASE 
						WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<0 THEN 'Expired'
					    WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])>=0 AND DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<5 THEN 'Expiring 5 Days'
						ELSE Lu_PermitStatus.[LU_NAME]
					 END
			   ELSE  
					Lu_PermitStatus.[LU_NAME]
		   END AS PERMIT_STATUS_NAME
		  ,[PERMITS].[NOTES]
		  ,(select count(pa.permit_id) from permit_attachments pa join attachments as a on a.attachment_id = pa.attachment_id where pa.permit_id = permits.permit_id and a.Is_deleted = 0) as ATTACHMENTS_COUNT
		  ,[PERMITS].[CREATED_BY]
		  ,[PERMITS].[CREATED_ON]
		  ,[PERMITS].[MODIFIED_BY]
		  ,[PERMITS].[MODIFIED_ON]
		  ,[PERMITS].[LOCK_COUNTER]
		  --,case when ISNULL(H_PM_USERS.LAST_NAME,'')!='' then H_PM_USERS.LAST_NAME+', '+ISNULL(H_PM_USERS.FIRST_NAME,'') ELSE '' END HYLAN_PM_NAME
		  ,[PERMITS].[SUBMITTED_DATE]
		  ,[PERMITS].[STIPULATION_DAY]
		  ,[PERMITS].[STIPULATION_NIGHT]
		  ,[PERMITS].[STIPULATION_WEEKEND]
		  --need this to load in the inline filters
		  ,case When IsNull([PERMITS].[STIPULATION_DAY],0) = 0 then 'No' ELSE 'Yes' End STIPULATION_DAY1
		  ,case When IsNull([PERMITS].[STIPULATION_NIGHT],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_NIGHT1]
		  ,case When IsNull([PERMITS].[STIPULATION_WEEKEND],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_WEEKEND1]
		  ,case When IsNull([PERMITS].[IS_PROTECTED_STREET],'N') = 'N' then 'No' ELSE 'Yes' End [IS_PROTECTED_STREET1]
		  ,[PERMITS].[STIPULATIONS_OTHER]
		  ,[PERMITS].[REJECTED_DATE]
		  ,[PERMITS].[REJECTED_REASON]
		  ,Lu_RejectedReasons.[LU_NAME] [REJECTED_REASON_NAME]
		  ,[PERMITS].IS_PAGE2_FILLED
	  FROM [dbo].[PERMITS]
	  LEFT JOIN [LOOK_UPS] Lu_PermitStatus ON ([PERMITS].[PERMIT_STATUS] = Lu_PermitStatus.[LOOK_UP_ID])
	  LEFT JOIN PERMIT_TYPES PermitNames on (PermitNames.PERMIT_TYPE_ID = [PERMITS].[PERMIT_TYPE])
	  LEFT JOIN LOOK_UPS Lu_PermitCategories ON (PermitNames.PERMIT_CATEGORY = Lu_PermitCategories.[LOOK_UP_ID])
	  LEFT JOIN JOBS ON (JOBS.JOB_ID = PERMITS.JOB_ID)
	  LEFT JOIN PROJECTS ON (PROJECTS.PROJECT_ID = PERMITS.PROJECT_ID)
	  LEFT JOIN COMPANIES ON (COMPANIES.COMPANY_ID = PROJECTS.CLIENT)
	  LEFT JOIN [LOOK_UPS] Lu_RejectedReasons ON ([PERMITS].REJECTED_REASON = Lu_RejectedReasons.[LOOK_UP_ID])
	  WHERE
	  	(isNull(@p_projectIDs,'All') = 'All' or cast(isNUll(Jobs.[PROJECT_ID],-1) as varchar) in (Select item from dbo.split(@p_projectIDs,',') ) )




	SET @Err = @@Error

	RETURN @Err
END
Go

--------------



ALTER PROCEDURE [dbo].[proc_PERMITSLoadByPrimaryKey] 
(
	@p_PERMIT_ID int
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int
	
	SELECT [PERMIT_ID]
		  ,ISNULL(Jobs.[PROJECT_ID] ,-1) [PROJECT_ID]
		  ,ISNULL(PROJECTS.HYLAN_PROJECT_ID, 'Unknown') HYLAN_PROJECT_ID
		  ,ISNULL(PERMITS.JOB_ID, -1) JOB_ID
		  ,ISNULL(cast(JOBS.[JOB_FILE_NUMBER] as varchar) ,'Unknown')  [JOB_FILE_NUMBER] 
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[CLIENT] ELSE COMPANIES.COMPANY_NAME END AS CLIENT
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID1]		   ELSE JOBS.[NODE_ID1]         END  [NODE_ID1]
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID2]		   ELSE JOBS.[NODE_ID2]			END  [NODE_ID2]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[NODE_ID3]		   ELSE JOBS.[NODE_ID3]			END  [NODE_ID3]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[HUB]			   ELSE JOBS.[HUB]				END  [HUB]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN   PERMITS.HYLAN_PM ELSE JOBS.Hylan_PM END  [HYLAN_PM]
		  ,Cast(CASE WHEN HYLAN_PROJECT_ID IS NULL THEN  dbo.fGetUserName(PERMITS.HYLAN_PM)  ELSE dbo.fGetUserName(JOBS.Hylan_PM) END as varchar(100)) [HYLAN_PM_NAME]
		  
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[STREET_ADDRESS]  ELSE JOBS.[STREET_ADDRESS]	END  [STREET_ADDRESS]	
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[CITY]			   ELSE JOBS.[CITY]				END  [CITY]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[STATE]		   ELSE JOBS.[STATE]			END  [STATE]			
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[ZIP]			   ELSE JOBS.[ZIP]				END  [ZIP]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[LAT]			   ELSE JOBS.[LAT]				END  [LAT]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[LONG]			   ELSE JOBS.[LONG]				END  [LONG]				
		  ,CASE WHEN HYLAN_PROJECT_ID IS NULL THEN [PERMITS].[POLE_LOCATION]	   ELSE JOBS.[POLE_LOCATION]	END  [POLE_LOCATION]	
		  ,[PERMITS].PERMIT_NUMBER_TEXT PERMIT_NUMBER_TEXT
		  ,[PERMITS].[PERMIT_TYPE]
		  ,PermitNames.[DESCRIPTION] PERMIT_DESCRIPTION		  
		  ,Lu_PermitCategories.[LOOK_UP_ID] AS PERMIT_CATEGORY
		  ,Lu_PermitCategories.[LU_NAME] AS PERMIT_CATEGORY_NAME
		  ,[PERMITS].[DOT_TRACKING_NUMBER]
		  ,[PERMITS].[SEGMENT]
		  --,CASE WHEN [PERMITS].[IS_PROTECTED_STREET] = 'Y' THEN 'Yes' WHEN [PERMITS].[IS_PROTECTED_STREET] = 'N' THEN 'No' ELSE ISNULL([PERMITS].[IS_PROTECTED_STREET],'') END [IS_PROTECTED_STREET]
		  ,isNull( [PERMITS].[IS_PROTECTED_STREET] , 'N' ) [IS_PROTECTED_STREET]
		  ,[PERMITS].[MARKOUT_START_DATE]
		  ,[PERMITS].[MARKOUT_END_DATE]
		  ,[PERMITS].[ISSUED_DATE]
		  ,[PERMITS].[VALID_DATE]
		  ,[PERMITS].[EXPIRES_DATE]
		  ,CASE WHEN EXPIRES_DATE IS NOT NULL AND Lu_PermitStatus.[LU_NAME] = 'Active'
				THEN CASE 
						WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<0 THEN (SELECT TOP 1 LOOK_UP_ID FROM LOOK_UPS WHERE LU_TYPE = 'PERMIT_STATUS' AND LU_NAME = 'Active' )
					    ELSE [PERMITS].[PERMIT_STATUS]
					 END
			   ELSE  
					[PERMITS].[PERMIT_STATUS]
		   END AS [PERMIT_STATUS]
		  ,CASE WHEN EXPIRES_DATE IS NOT NULL AND Lu_PermitStatus.[LU_NAME] = 'Active'
				THEN CASE 
						WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<0 THEN 'Expired'
					    WHEN DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])>=0 AND DATEDIFF(d,getdate() ,[PERMITS].[EXPIRES_DATE])<5 THEN 'Expiring 5 Days'
						ELSE Lu_PermitStatus.[LU_NAME]
					 END
			   ELSE  
					Lu_PermitStatus.[LU_NAME]
		   END AS PERMIT_STATUS_NAME
		  ,[PERMITS].[NOTES]
		  ,(select count(pa.permit_id) from permit_attachments pa join attachments as a on a.attachment_id = pa.attachment_id where pa.permit_id = permits.permit_id and a.Is_deleted = 0) as ATTACHMENTS_COUNT
		  ,[PERMITS].[CREATED_BY]
		  ,[PERMITS].[CREATED_ON]
		  ,[PERMITS].[MODIFIED_BY]
		  ,[PERMITS].[MODIFIED_ON]
		  ,[PERMITS].[LOCK_COUNTER]
		  --,case when ISNULL(H_PM_USERS.LAST_NAME,'')!='' then H_PM_USERS.LAST_NAME+', '+ISNULL(H_PM_USERS.FIRST_NAME,'') ELSE '' END HYLAN_PM_NAME
		  ,[PERMITS].[SUBMITTED_DATE]
		  ,[PERMITS].[STIPULATION_DAY]
		  ,[PERMITS].[STIPULATION_NIGHT]
		  ,[PERMITS].[STIPULATION_WEEKEND]
		  --need this to load in the inline filters
		  ,case When IsNull([PERMITS].[STIPULATION_DAY],0) = 0 then 'No' ELSE 'Yes' End STIPULATION_DAY1
		  ,case When IsNull([PERMITS].[STIPULATION_NIGHT],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_NIGHT1]
		  ,case When IsNull([PERMITS].[STIPULATION_WEEKEND],0) = 0 then 'No' ELSE 'Yes' End [STIPULATION_WEEKEND1]
		  ,case When IsNull([PERMITS].[IS_PROTECTED_STREET],'N') = 'N' then 'No' ELSE 'Yes' End [IS_PROTECTED_STREET1]
		  ,[PERMITS].[STIPULATIONS_OTHER]
		  ,[PERMITS].[REJECTED_DATE]
		  ,[PERMITS].[REJECTED_REASON]
		  ,Lu_RejectedReasons.[LU_NAME] [REJECTED_REASON_NAME]
		  ,[PERMITS].IS_PAGE2_FILLED
	  FROM [dbo].[PERMITS]
	  LEFT JOIN [LOOK_UPS] Lu_PermitStatus ON ([PERMITS].[PERMIT_STATUS] = Lu_PermitStatus.[LOOK_UP_ID])
	  LEFT JOIN PERMIT_TYPES PermitNames on (PermitNames.PERMIT_TYPE_ID = [PERMITS].[PERMIT_TYPE])
	  LEFT JOIN LOOK_UPS Lu_PermitCategories ON (PermitNames.PERMIT_CATEGORY = Lu_PermitCategories.[LOOK_UP_ID])
	  LEFT JOIN JOBS ON (JOBS.JOB_ID = PERMITS.JOB_ID)
	  LEFT JOIN PROJECTS ON (PROJECTS.PROJECT_ID = Jobs.PROJECT_ID)
	  LEFT JOIN COMPANIES ON (COMPANIES.COMPANY_ID = PROJECTS.CLIENT)
	  LEFT JOIN [LOOK_UPS] Lu_RejectedReasons ON ([PERMITS].REJECTED_REASON = Lu_RejectedReasons.[LOOK_UP_ID])
	WHERE
		([PERMIT_ID] = @p_PERMIT_ID)

	SET @Err = @@Error

	RETURN @Err
END
go

--------------